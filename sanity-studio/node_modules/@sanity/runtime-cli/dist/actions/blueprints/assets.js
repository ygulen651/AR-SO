import fs from 'node:fs';
import path from 'node:path';
import { cwd } from 'node:process';
import AdmZip from 'adm-zip';
import config from '../../config.js';
import { resolveResourceDependencies } from '../../utils/functions/resolve-dependencies.js';
import { shouldAutoResolveDependencies } from '../../utils/functions/should-auto-resolve-deps.js';
import { shouldTranspileFunction } from '../../utils/functions/should-transpile.js';
import getHeaders from '../../utils/get-headers.js';
import { transpileFunction } from '../../utils/transpile/transpile-function.js';
const { apiUrl } = config;
export const stashUrl = `${apiUrl}vX/blueprints/assets/stash`;
export async function stashAsset({ resource, auth, }) {
    if (!resource.src)
        throw new Error('Resource src is required');
    let functionPath = path.join(cwd(), resource.src);
    let cleanup = async () => { };
    const shouldTranspile = await shouldTranspileFunction(resource);
    if (shouldTranspile) {
        try {
            const result = await transpileFunction(resource);
            functionPath = result.outputDir;
            cleanup = result.cleanup;
        }
        catch (err) {
            return { success: false, error: err instanceof Error ? err.message : `${err}` };
        }
    }
    const shouldResolveDependencies = await shouldAutoResolveDependencies(resource);
    if (shouldResolveDependencies) {
        await resolveResourceDependencies(resource, shouldTranspile);
    }
    try {
        const stats = await fs.promises.stat(functionPath);
        const zip = new AdmZip();
        if (stats.isDirectory()) {
            zip.addLocalFolder(functionPath);
        }
        else {
            zip.addLocalFile(functionPath, '', 'index.js');
        }
        const zipBuffer = zip.toBuffer();
        const base64Zip = zipBuffer.toString('base64');
        const assetResponse = await fetch(stashUrl, {
            method: 'POST',
            headers: getHeaders(auth),
            body: JSON.stringify({
                file: base64Zip,
                filename: `${resource.name}.zip`,
            }),
        });
        const assetJson = await assetResponse.json();
        if (assetResponse.ok) {
            return { success: true, assetId: assetJson.id };
        }
        return { success: false, error: assetJson.message || 'Unknown error' };
    }
    catch (err) {
        let error = '';
        if (err instanceof Error)
            error = err.message;
        return { success: false, error };
    }
    finally {
        await cleanup();
    }
}
