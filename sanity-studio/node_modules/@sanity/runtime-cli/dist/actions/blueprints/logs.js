import { EventSource } from 'eventsource';
import config from '../../config.js';
import getHeaders from '../../utils/get-headers.js';
const { apiUrl } = config;
export const logsUrl = `${apiUrl}vX/blueprints/logs`;
export async function getLogs(stackId, auth) {
    const url = new URL(logsUrl);
    url.searchParams.append('stackId', stackId);
    const response = await fetch(url.toString(), {
        headers: getHeaders(auth),
        method: 'GET',
    });
    const result = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : result.message || 'Unknown error',
        logs: response.ok ? result : [],
    };
}
// Process logs to find the newest timestamp
export function findNewestLogTimestamp(logs) {
    let newestTimestamp = 0;
    if (logs.length > 0) {
        for (const log of logs) {
            const timestamp = new Date(log.timestamp).getTime();
            if (timestamp > newestTimestamp) {
                newestTimestamp = timestamp;
            }
        }
    }
    return newestTimestamp;
}
// Check if a log is newer than a given timestamp
export function isNewerLog(log, timestamp) {
    const logTimestamp = new Date(log.timestamp).getTime();
    return logTimestamp > timestamp;
}
// Get most recent logs, up to a limit
export function getRecentLogs(logs, limit = 10) {
    const sortedLogs = [...logs].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());
    return sortedLogs.slice(-limit);
}
export function streamLogs({ stackId, after, auth, onLog, onOpen, onError, }) {
    const url = new URL(`${logsUrl}/stream`);
    url.searchParams.append('stackId', stackId);
    if (after)
        url.searchParams.append('after', after);
    const headers = getHeaders(auth);
    const eventSource = new EventSource(url.toString(), {
        fetch: (input, init) => fetch(input, {
            ...init,
            headers: {
                ...init?.headers,
                ...headers,
            },
        }),
    });
    eventSource.onopen = onOpen;
    eventSource.onmessage = (event) => {
        try {
            const log = JSON.parse(event.data);
            onLog(log);
        }
        catch (err) {
            onError(`Failed to parse log data: ${err instanceof Error ? err.message : String(err)}`);
        }
    };
    eventSource.addEventListener('logs', (event) => {
        try {
            const logData = JSON.parse(event.data);
            // usually an array
            if (Array.isArray(logData)) {
                for (const log of logData)
                    onLog(log);
            }
            else {
                onLog(logData);
            }
        }
        catch (err) {
            console.error('Error parsing logs event:', err);
        }
    });
    eventSource.onerror = (err) => {
        onError('Connection to log stream failed or was closed');
        if (eventSource.readyState === eventSource.CLOSED) {
            console.log('Connection is CLOSED');
        }
        else if (eventSource.readyState === eventSource.CONNECTING) {
            console.log('Connection is attempting to reconnect...');
            return; // Don't close if trying to reconnect
        }
        eventSource.close();
    };
    return () => {
        eventSource.close();
    };
}
