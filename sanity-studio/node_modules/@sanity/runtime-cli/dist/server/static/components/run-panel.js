/* globals customElements document */
import {ApiBaseElement} from './api-base.js'

const runTemplate = `<svg data-sanity-icon="play" width="1em" height="1em" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7.5 18.5V6.5L17.5 12.5L7.5 18.5Z" fill="currentColor" stroke="currentColor" stroke-width="1.2" stroke-linejoin="round"></path></svg>
<span>Run</span>`

const template = `<div style="padding: var(--space-3);">
    <button ord="primary" class="sanity-button">
        <span style="padding: var(--space-3); display: flex; gap: 0.25rem; justify-content: center; flex-direction: row;">
            ${runTemplate}
        </span>
    </button>
</div>
`
class RunPanel extends ApiBaseElement {
  invoke = () => {
    this.api.store.result = {logs: '', time: 0}
    const payloadText = this.createPayloadText(this.api.store.payload.state.doc)
    const event = JSON.parse(payloadText)
    const context = {
      clientOptions: {
        apiVersion: this.apiVersion.value,
        dataset: this.api.store.selectedDataset,
        projectId: this.api.store.selectedProject,
        token: this.api.store.withToken,
      },
    }
    this.api.invoke({context, event})
  }
  createPayloadText = (doc) => {
    if (doc.text) {
      return doc.text.join('') || '{}'
    }
    if (doc.children) {
      return doc.children.map((child) => child.text.join('')).join('') || '{}'
    }
    return '{}'
  }
  updateButtonText = ({inprogress}) => {
    if (inprogress) {
      this.button.setAttribute('disabled', '')
      this.buttonText.innerHTML = '<network-spinner></network-spinner>'
    } else {
      this.button.removeAttribute('disabled')
      this.buttonText.innerHTML = runTemplate
    }
  }
  onKeyDown = (event) => {
    if (event.ctrlKey && event.key === 'Enter') {
      this.invoke()
    }
  }

  connectedCallback() {
    this.innerHTML = template
    this.apiVersion = document.querySelector('#apiversion')
    this.datasetname = document.querySelector('#datasetname')
    this.productId = document.querySelector('#project')
    this.button = this.querySelector('button')
    this.buttonText = this.button.querySelector('span')
    this.button.addEventListener('click', this.invoke)
    document.addEventListener('keydown', this.onKeyDown)
    this.api.subscribe(this.updateButtonText, ['inprogress'])
  }

  disconnectedCallback() {
    this.button.removeEventListener('click', this.invoke)
    document.removeEventListener('keydown', this.onKeyDown)
  }
}

customElements.define('run-panel', RunPanel)
