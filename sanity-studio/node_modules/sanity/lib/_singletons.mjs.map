{"version":3,"file":"_singletons.mjs","sources":["../src/_singletons/context/ActiveWorkspaceMatcherContext.ts","../src/_singletons/context/AddonDatasetContext.ts","../src/_singletons/context/AppIdCacheContext.ts","../src/_singletons/context/CalendarContext.ts","../src/_singletons/context/ChangeIndicatorTrackerContexts.ts","../src/_singletons/context/ColorSchemeSetValueContext.ts","../src/_singletons/context/ColorSchemeValueContext.ts","../src/_singletons/context/CommentInputContext.ts","../src/_singletons/context/CommentsAuthoringPathContext.ts","../src/_singletons/context/CommentsContext.ts","../src/_singletons/context/CommentsEnabledContext.ts","../src/_singletons/context/CommentsIntentContext.ts","../src/_singletons/context/CommentsOnboardingContext.ts","../src/_singletons/context/CommentsSelectedPathContext.ts","../src/_singletons/context/CommentsUpsellContext.ts","../src/_singletons/context/CopyPasteContext.ts","../src/_singletons/context/DiffContext.ts","../src/_singletons/context/DocumentActionPropsContext.ts","../src/_singletons/context/DocumentChangeContext.ts","../src/_singletons/context/DocumentFieldActionsContext.ts","../src/_singletons/context/DocumentIdContext.ts","../src/_singletons/context/DocumentPaneContext.ts","../src/_singletons/context/DocumentSheetListContext.ts","../src/_singletons/context/EventsContext.ts","../src/_singletons/context/FieldActionsContext.ts","../src/_singletons/context/FormBuilderContext.ts","../src/_singletons/context/FormCallbacksContext.ts","../src/_singletons/context/FormFieldPresenceContext.ts","../src/_singletons/context/FormValueContext.ts","../src/_singletons/context/FreeTrialContext.ts","../src/_singletons/context/GetFormValueContext.ts","../src/_singletons/context/HoveredFieldContext.ts","../src/_singletons/context/IsLastPaneContext.ts","../src/_singletons/context/LocaleContext.ts","../src/_singletons/context/MediaLibraryIdContext.ts","../src/_singletons/context/MentionUserContext.ts","../src/_singletons/context/NavbarContext.ts","../src/_singletons/context/PaneContext.ts","../src/_singletons/context/PaneLayoutContext.ts","../src/_singletons/context/PaneRouterContext.tsx","../src/_singletons/context/PerspectiveContext.ts","../src/_singletons/context/PortableTextMarkersContext.ts","../src/_singletons/context/PortableTextMemberItemElementRefsContext.ts","../src/_singletons/context/PortableTextMemberItemsContext.ts","../src/_singletons/context/PresenceContext.ts","../src/_singletons/context/PresenceTrackerContexts.ts","../src/_singletons/context/PresentationContext.ts","../src/_singletons/context/PresentationDisplayedDocumentContext.ts","../src/_singletons/context/PresentationDocumentContext.ts","../src/_singletons/context/PresentationNavigateContext.ts","../src/_singletons/context/PresentationPanelsContext.ts","../src/_singletons/context/PresentationParamsContext.ts","../src/_singletons/context/PresentationSharedStateContext.ts","../src/_singletons/context/PreviewCardContext.ts","../src/_singletons/context/ReferenceInputOptionsContext.ts","../src/_singletons/context/ReferenceItemRefContext.ts","../src/_singletons/context/ReleasesMetadataContext.ts","../src/_singletons/context/ReleasesTableContext.ts","../src/_singletons/context/ReleasesUpsellContext.ts","../src/_singletons/context/ResourceCacheContext.ts","../src/_singletons/context/ReviewChangesContext.ts","../src/_singletons/context/RouterContext.ts","../src/_singletons/context/RouterHistoryContext.ts","../src/_singletons/context/SanityCreateConfigContext.tsx","../src/_singletons/context/ScheduledPublishingEnabledContext.ts","../src/_singletons/context/SchedulePublishingUpsellContext.ts","../src/_singletons/context/ScrollContext.ts","../src/_singletons/context/SearchContext.ts","../src/_singletons/context/SortableItemIdContext.ts","../src/_singletons/context/SourceContext.ts","../src/_singletons/context/StructureToolContext.ts","../src/_singletons/context/StudioAnnouncementsContext.ts","../src/_singletons/context/TasksContext.ts","../src/_singletons/context/TasksEnabledContext.ts","../src/_singletons/context/TasksNavigationContext.ts","../src/_singletons/context/TasksUpsellContext.ts","../src/_singletons/context/TreeEditingEnabledContext.ts","../src/_singletons/context/UserColorManagerContext.ts","../src/_singletons/context/ValidationContext.ts","../src/_singletons/context/VirtualizerScrollInstanceContext.ts","../src/_singletons/context/WorkspaceContext.ts","../src/_singletons/context/WorkspacesContext.ts","../src/_singletons/context/ZIndexContext.ts"],"sourcesContent":["import {createContext} from 'sanity/_createContext'\n\nimport type {ActiveWorkspaceMatcherContextValue} from '../../core/studio/activeWorkspaceMatcher/ActiveWorkspaceMatcherContext'\n\n/** @internal */\nexport const ActiveWorkspaceMatcherContext =\n  createContext<ActiveWorkspaceMatcherContextValue | null>(\n    'sanity/_singletons/context/active-workspace-matcher',\n    null,\n  )\n","import {createContext} from 'sanity/_createContext'\n\nimport type {AddonDatasetContextValue} from '../../core/studio/addonDataset/types'\n\n/**\n * @beta\n * @hidden\n */\nexport const AddonDatasetContext = createContext<AddonDatasetContextValue | null>(\n  'sanity/_singletons/context/addon-dataset',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {AppIdCache} from '../../core/create/studio-app/appIdCache'\n\n/**\n * @internal\n */\nexport const AppIdCacheContext = createContext<AppIdCache | null>(\n  'sanity/_singletons/context/app-id-cache',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CalendarContextValue} from '../../core/studio/components/navbar/search/components/filters/filter/inputs/date/datePicker/calendar/contexts/CalendarContext'\n\n/**\n * @internal\n */\nexport const CalendarContext = createContext<CalendarContextValue | undefined>(\n  'sanity/_singletons/context/calendar',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {\n  ChangeIndicatorTrackerContextStoreType,\n  ChangeIndicatorTrackerGetSnapshotType,\n} from '../../core/changeIndicators/ChangeIndicatorTrackerContexts'\n\n/** @internal */\nexport const ChangeIndicatorTrackerContextStore =\n  createContext<ChangeIndicatorTrackerContextStoreType>(\n    'sanity/_singletons/context/change-indicator-tracker-store',\n    null,\n  )\n\n/** @internal */\nexport const ChangeIndicatorTrackerContextGetSnapshot =\n  createContext<ChangeIndicatorTrackerGetSnapshotType>(\n    'sanity/_singletons/context/change-indicator-tracker-get-snapshot',\n    null,\n  )\n","import {createContext} from 'sanity/_createContext'\n\nimport type {StudioThemeColorSchemeKey} from '../../core/theme/types'\n\n/**\n * The setter for ColorSchemeValueContext, in a separate context to avoid unnecessary re-renders\n * If set to false then the UI should adjust to reflect that the Studio can't change the color scheme\n * @internal\n */\nexport const ColorSchemeSetValueContext = createContext<\n  ((nextScheme: StudioThemeColorSchemeKey) => void) | false | null\n>('sanity/_singletons/context/color-scheme-set-value', null)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {StudioThemeColorSchemeKey} from '../../core/theme/types'\n\n/**\n * Used to keep track of the internal value, which can be \"system\" in addition to \"light\" and \"dark\"\n * @internal\n */\nexport const ColorSchemeValueContext = createContext<StudioThemeColorSchemeKey | null>(\n  'sanity/_singletons/context/color-scheme-value',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentInputContextValue} from '../../core/comments/components/pte/comment-input/CommentInputProvider'\n\n/**\n * @internal\n */\nexport const CommentInputContext = createContext<CommentInputContextValue | null>(\n  'sanity/_singletons/context/comment-input',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsAuthoringPathContextValue} from '../../core/comments/context/authoring-path/types'\n\n/**\n * @beta\n * @hidden\n */\nexport const CommentsAuthoringPathContext = createContext<CommentsAuthoringPathContextValue | null>(\n  'sanity/_singletons/context/comments-authoring-path',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsContextValue} from '../../core/comments/context/comments/types'\n\n/**\n * @internal\n */\nexport const CommentsContext = createContext<CommentsContextValue | null>(\n  'sanity/_singletons/context/comments',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsEnabledContextValue} from '../../core/comments/context/enabled/types'\n\n// NOTE: We initialize this context with a default value (`enabled: false`)\n// rather than `null` to handle cases where the comments feature's availability\n// isn't explicitly provided by a surrounding provider component. Typically,\n// comments functionality is included by default in all new studio\n// configurations. Therefore, in the absence of a specific provider\n// (CommentsEnabledProvider), we assume that the feature is disabled.\n/**\n * @internal\n */\nexport const CommentsEnabledContext = createContext<CommentsEnabledContextValue>(\n  'sanity/_singletons/context/comments-enabled',\n  {\n    enabled: false,\n    mode: null,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsIntentContextValue} from '../../core/comments/context/intent/types'\n\n/**\n * @internal\n */\nexport const CommentsIntentContext = createContext<CommentsIntentContextValue | undefined>(\n  'sanity/_singletons/context/comments-intent',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsOnboardingContextValue} from '../../core/comments/context/onboarding/types'\n\n/**\n * @internal\n */\nexport const CommentsOnboardingContext = createContext<CommentsOnboardingContextValue | null>(\n  'sanity/_singletons/context/comments-onboarding',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsSelectedPathContextValue} from '../../core/comments/context/selected-path/types'\n\n/**\n * @internal\n */\nexport const CommentsSelectedPathContext = createContext<CommentsSelectedPathContextValue | null>(\n  'sanity/_singletons/context/comments-selected-path',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CommentsUpsellContextValue} from '../../core/comments/context/upsell/types'\n\n/**\n * @internal\n */\nexport const CommentsUpsellContext = createContext<CommentsUpsellContextValue | null>(\n  'sanity/_singletons/context/comments-upsell',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {CopyPasteContextType} from '../../core/studio/copyPaste'\n\n/**\n * @beta\n * @hidden\n */\nexport const CopyPasteContext = createContext<CopyPasteContextType | null>(\n  'sanity/_singletons/context/copy-paste',\n  null,\n)\n","import type {Path} from '@sanity/types'\nimport {createContext} from 'sanity/_createContext'\n\n/** @internal */\nexport const DiffContext = createContext<{\n  path: Path\n}>('sanity/_singletons/context/diff', {\n  path: [],\n})\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentActionProps} from '../../core/config/document/actions'\n\n/**\n * @internal\n */\nexport const DocumentActionPropsContext = createContext<DocumentActionProps | undefined>(\n  'sanity/_singletons/context/document-action-props',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentChangeContextInstance} from '../../core/field/diff/contexts/DocumentChangeContext'\n\n/** @internal */\nexport const DocumentChangeContext = createContext<DocumentChangeContextInstance | null>(\n  'sanity/_singletons/context/document-change',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentFieldAction} from '../../core/config/document/fieldActions/types'\n\n/**\n * @internal\n */\nexport interface DocumentFieldActionsContextValue {\n  actions: DocumentFieldAction[]\n}\n\n/**\n * @internal\n */\nexport const DocumentFieldActionsContext = createContext<DocumentFieldActionsContextValue | null>(\n  'sanity/_singletons/context/document-field-actions',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport interface DocumentIdContextValue {\n  id: string\n}\n\n/**\n * @internal\n */\nexport const DocumentIdContext = createContext<DocumentIdContextValue | null>(\n  'sanity/_singletons/context/document-id',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentPaneContextValue} from '../../structure/panes/document/DocumentPaneContext'\n\n/** @internal */\nexport const DocumentPaneContext = createContext<DocumentPaneContextValue | null>(\n  'sanity/_singletons/context/document-pane',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {DocumentSheetListContextValue} from '../../structure/panes/documentList/sheetList/DocumentSheetListProvider'\n\n/** @internal */\nexport const DocumentSheetListContext = createContext<DocumentSheetListContextValue | undefined>(\n  'sanity/_singletons/context/document-sheet-list',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {EventsStore} from '../../core/store/events/types'\n\n/**\n * @internal\n */\nexport const EventsContext = createContext<EventsStore | null>(\n  'sanity/_singletons/context/events',\n  null,\n)\n","import type {ReactNode} from 'react'\nimport {createContext} from 'sanity/_createContext'\n\nimport type {DocumentFieldActionNode} from '../../core/config/document/fieldActions/types'\nimport type {FieldCommentsProps} from '../../core/form/types/fieldProps'\n\n/** @internal */\nexport interface FieldActionsContextValue {\n  actions: DocumentFieldActionNode[]\n  __internal_comments?: FieldCommentsProps\n  __internal_slot?: ReactNode\n  focused?: boolean\n  hovered: boolean\n  onMouseEnter: () => void\n  onMouseLeave: () => void\n}\n\n/** @internal */\nexport const FieldActionsContext = createContext<FieldActionsContextValue>(\n  'sanity/_singletons/context/field-actions',\n  {\n    actions: [],\n    focused: false,\n    hovered: false,\n    // eslint-disable-next-line camelcase\n    __internal_slot: undefined,\n    // eslint-disable-next-line camelcase\n    __internal_comments: undefined,\n    onMouseEnter: () => undefined,\n    onMouseLeave: () => undefined,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormBuilderContextValue} from '../../core/form/FormBuilderContext'\n\n/**\n * @internal\n */\nexport const FormBuilderContext = createContext<FormBuilderContextValue | null>(\n  'sanity/_singletons/context/form-builder',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormCallbacksValue} from '../../core/form/studio/contexts/FormCallbacks'\n\n/**\n * @internal\n */\nexport const FormCallbacksContext = createContext<FormCallbacksValue | null>(\n  'sanity/_singletons/context/form-callbacks',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormNodePresence} from '../../core/presence/types'\n\n/** @internal */\nexport const FormFieldPresenceContext = createContext<FormNodePresence[]>(\n  'sanity/_singletons/context/form-field-presence',\n  [],\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormValueContextValue} from '../../core/form/contexts/FormValue'\n\n/**\n * @internal\n */\nexport const FormValueContext = createContext<FormValueContextValue | null>(\n  'sanity/_singletons/context/form-value',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FreeTrialContextProps} from '../../core/studio/components/navbar/free-trial/FreeTrialContext'\n\n/**\n * @internal\n */\nexport const FreeTrialContext = createContext<FreeTrialContextProps | undefined>(\n  'sanity/_singletons/context/free-trial',\n  undefined,\n)\n","import type {Path} from '@sanity/types'\nimport {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n * @hidden\n */\nexport type GetFormValueContextValue = (path: Path) => unknown\n\n/**\n * @internal\n */\nexport const GetFormValueContext = createContext<GetFormValueContextValue | null>(\n  'sanity/_singletons/context/get-form-value',\n  null,\n)\n","import type {Path} from '@sanity/types'\nimport {createContext} from 'sanity/_createContext'\n\n/** @internal */\nexport interface HoveredFieldContextValue {\n  store: {\n    subscribe: (onStoreCallback: () => void) => () => void\n    getSnapshot: () => string[]\n  }\n  onMouseEnter: (path: Path) => void\n  onMouseLeave: (path: Path) => void\n}\n\n/** @internal */\nexport const HoveredFieldContext = createContext<HoveredFieldContextValue>(\n  'sanity/_singletons/context/hovered-field',\n  {\n    store: {\n      subscribe: () => () => undefined,\n      getSnapshot: () => [],\n    },\n    onMouseEnter: () => undefined,\n    onMouseLeave: () => undefined,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\n/**\n * TODO: remove this context when alternate document-specific context are\n * introduced.\n *\n * The following context is used in the structure tool to set the active\n * document if it's the last pane open in the structure tool. This is a\n * temporary context provider that was introduced when the comments and tasks\n * plugins were refactor and decoupled from the structure tool. ideally this\n * should be removed and replaced with a document-specific context that gives\n * plugin authors access to what the `usePane`, `usePaneRouter`, and\n * `useDocumentPane` provides without exposing specifics from the structure tool\n */\n/**\n * @internal\n */\nexport const IsLastPaneContext = createContext<boolean>(\n  'sanity/_singletons/context/is-last-pane',\n  false,\n)\n","// eslint-disable-next-line @sanity/i18n/no-i18next-import -- figure out how to have the linter be fine with importing types-only\nimport type {i18n} from 'i18next'\nimport {createContext} from 'sanity/_createContext'\n\nimport type {Locale} from '../../core/i18n/types'\n\n/**\n * @internal\n * @hidden\n */\nexport interface LocaleContextValue {\n  locales: Locale[]\n  currentLocale: Locale\n  __internal: {\n    i18next: i18n\n  }\n  changeLocale: (newLocale: string) => Promise<void>\n}\n\n/**\n * @internal\n * @hidden\n */\nexport const LocaleContext = createContext<LocaleContextValue | undefined>(\n  'sanity/_singletons/context/locale',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\n/** @internal */\nexport const MediaLibraryIdContext = createContext<string | null>(\n  'sanity/_singletons/context/media-library',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {MentionUserContextValue} from '../../core/tasks/context/mentionUser/types'\n\n/**\n * @internal\n */\nexport const MentionUserContext = createContext<MentionUserContextValue | null>(\n  'sanity/_singletons/context/mention-user',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {NavbarContextValue} from '../../core/studio/StudioLayout'\n\n/** @internal */\nexport const NavbarContext = createContext<NavbarContextValue>(\n  'sanity/_singletons/context/navbar',\n  {\n    onSearchFullscreenOpenChange: () => '',\n    onSearchOpenChange: () => '',\n    searchFullscreenOpen: false,\n    searchFullscreenPortalEl: null,\n    searchOpen: false,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PaneContextValue} from '../../structure/components/pane/types'\n\n/**\n * @internal\n */\nexport const PaneContext = createContext<PaneContextValue | null>(\n  'sanity/_singletons/context/pane',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PaneLayoutContextValue} from '../../structure/components/pane/types'\n\n/**\n * @internal\n */\nexport const PaneLayoutContext = createContext<PaneLayoutContextValue | null>(\n  'sanity/_singletons/context/pane-layout',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PaneRouterContextValue} from '../../structure/components/paneRouter/types'\n\nfunction missingContext<T = unknown>(): T {\n  throw new Error('Pane is missing router context')\n}\n\n/**\n *\n * @hidden\n * @beta\n */\nexport const PaneRouterContext = createContext<PaneRouterContextValue>(\n  'sanity/_singletons/context/pane-router',\n  {\n    index: 0,\n    groupIndex: 0,\n    siblingIndex: 0,\n    payload: undefined,\n    params: {},\n    hasGroupSiblings: false,\n    groupLength: 0,\n    routerPanesState: [],\n    BackLink: () => missingContext(),\n    ChildLink: () => missingContext(),\n    ReferenceChildLink: () => missingContext(),\n    handleEditReference: () => missingContext(),\n    ParameterizedLink: () => missingContext(),\n    replaceCurrent: () => missingContext(),\n    closeCurrentAndAfter: () => missingContext(),\n    closeCurrent: () => missingContext(),\n    duplicateCurrent: () => missingContext(),\n    setView: () => missingContext(),\n    setParams: () => missingContext(),\n    setPayload: () => missingContext(),\n    navigateIntent: () => missingContext(),\n    createPathWithParams: () => missingContext(),\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PerspectiveContextValue} from '../../core/perspective/types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport const PerspectiveContext = createContext<PerspectiveContextValue | null>(\n  'sanity/_singletons/context/perspective-context',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PortableTextMarker} from '../../core/form/types/_transitional'\n\n/**\n * @internal\n */\nexport const PortableTextMarkersContext = createContext<PortableTextMarker[]>(\n  'sanity/_singletons/context/portable-text-markers',\n  [],\n)\n","import {BehaviorSubject} from 'rxjs'\nimport {createContext} from 'sanity/_createContext'\n\n/** @internal */\nexport type PortableTextEditorElement = HTMLDivElement | HTMLSpanElement\n\n/**\n * @internal\n */\nexport const PortableTextMemberItemElementRefsContext = createContext<\n  BehaviorSubject<Record<string, PortableTextEditorElement | null | undefined>>\n>('sanity/_singletons/context/portable-text-member-item-element-refs', new BehaviorSubject({}))\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PortableTextMemberItem} from '../../core/form/inputs/PortableText/PortableTextInput'\n\n/**\n * @internal\n */\nexport const PortableTextMemberItemsContext = createContext<PortableTextMemberItem[]>(\n  'sanity/_singletons/context/portable-text-member-items',\n  [],\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {FormNodePresence} from '../../core/presence/types'\n\n/**\n * @internal\n */\nexport const PresenceContext = createContext<FormNodePresence[]>(\n  'sanity/_singletons/context/presence',\n  [],\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {\n  PresenceTrackerContextStoreType,\n  PresenceTrackerGetSnapshotType,\n} from '../../core/presence/overlay/PresenceTrackerContexts'\n\n/** @internal */\nexport const PresenceTrackerContextStore = createContext<PresenceTrackerContextStoreType>(\n  'sanity/_singletons/context/presence-tracker-store',\n  null,\n)\n\n/** @internal */\nexport const PresenceTrackerContextGetSnapshot = createContext<PresenceTrackerGetSnapshotType>(\n  'sanity/_singletons/context/presence-tracker-get-snapshot',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PresentationContextValue} from '../../presentation/types'\n\n/**\n * @internal\n */\nexport const PresentationContext = createContext<PresentationContextValue | null>(\n  'sanity/_singletons/context/presentation',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PresentationDisplayedDocumentContextValue} from '../../presentation/loader/types'\n\n/**\n * @internal\n */\nexport const PresentationDisplayedDocumentContext =\n  createContext<PresentationDisplayedDocumentContextValue | null>(\n    'sanity/_singletons/context/presentation/displayed-document',\n    null,\n  )\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PresentationDocumentContextValue} from '../../presentation/document/types'\n\n/**\n * @internal\n */\nexport const PresentationDocumentContext = createContext<PresentationDocumentContextValue | null>(\n  'sanity/_singletons/context/presentation/document',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PresentationNavigateContextValue} from '../../presentation/types'\n\n/**\n * @internal\n */\nexport const PresentationNavigateContext = createContext<PresentationNavigateContextValue | null>(\n  'sanity/_singletons/context/presentation/navigate',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PresentationPanelsContextValue} from '../../presentation/panels/types'\n\n/**\n * @internal\n */\nexport const PresentationPanelsContext = createContext<PresentationPanelsContextValue | null>(\n  'sanity/_singletons/context/presentation/panels',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PresentationParamsContextValue} from '../../presentation/types'\n\n/**\n * @internal\n */\nexport const PresentationParamsContext = createContext<PresentationParamsContextValue | null>(\n  'sanity/_singletons/context/presentation/params',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PresentationSharedStateContextValue} from '../../presentation/overlays/types'\n\n/**\n * @internal\n */\nexport const PresentationSharedStateContext =\n  createContext<PresentationSharedStateContextValue | null>(\n    'sanity/_singletons/context/presentation/shared-state',\n    null,\n  )\n","import {createContext} from 'sanity/_createContext'\n\nimport type {PreviewCardContextValue} from '../../core/components/previewCard/PreviewCard'\n\n/**\n * @internal\n */\nexport const PreviewCardContext = createContext<PreviewCardContextValue>(\n  'sanity/_singletons/context/preview-card',\n  {\n    selected: false,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ReferenceInputOptions} from '../../core/form/studio/contexts/ReferenceInputOptions'\n\n/**\n * @internal\n */\nexport const ReferenceInputOptionsContext = createContext<ReferenceInputOptions>(\n  'sanity/_singletons/context/reference-input-options',\n  {},\n)\n","/* eslint-disable import/no-duplicates */\nimport type {MutableRefObject} from 'react'\nimport {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport interface ReferenceItemRef {\n  menuRef: MutableRefObject<HTMLDivElement | null>\n  menuButtonRef: MutableRefObject<HTMLButtonElement | null>\n  containerRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * This is a way to store ref of the menu as well as the container of the ReferenceItem\n * so it can be used down the tree for clickOutside handling\n * @internal\n */\nexport const ReferenceItemRefContext = createContext<ReferenceItemRef | null>(\n  'sanity/_singletons/context/reference-item-ref',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ReleasesMetadataContextValue} from '../../core/releases/contexts/ReleasesMetadataProvider'\n\n/**\n * @internal\n * @hidden\n */\nexport const ReleasesMetadataContext = createContext<ReleasesMetadataContextValue | null>(\n  'sanity/_singletons/context/releases-metadata',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TableContextValue} from '../../core/releases/tool/components/Table/TableProvider'\n\n/**\n * @internal\n */\nexport const TableContext = createContext<TableContextValue | null>(\n  'sanity/_singletons/context/releases-table',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ReleasesUpsellContextValue} from '../../core/releases/contexts/upsell/types'\n\n/**\n * @beta\n * @hidden\n */\nexport const ReleasesUpsellContext = createContext<ReleasesUpsellContextValue | null>(\n  'sanity/_singletons/context/releases-upsell',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ResourceCache} from '../../core/store/_legacy/ResourceCacheProvider'\n\n/**\n * @internal\n */\nexport const ResourceCacheContext = createContext<ResourceCache | null>(\n  'sanity/_singletons/context/resource-cache',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ConnectorContextValue} from '../../core/changeIndicators/ConnectorContext'\n\n/** @internal */\nexport const ReviewChangesContext = createContext<ConnectorContextValue>(\n  'sanity/_singletons/context/review-changes',\n  {\n    onOpenReviewChanges: () => undefined,\n    onSetFocus: () => undefined,\n    isReviewChangesOpen: false,\n    isInteractive: true,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {RouterContextValue} from '../../router/types'\n\n/**\n * @internal\n */\nexport const RouterContext = createContext<RouterContextValue | null>(\n  'sanity/_singletons/context/router',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {RouterHistory} from '../../core/studio/router'\n\n/**\n * Internal use only. Userland should leverage the public `useRouter` APIs.\n * @internal\n */\nexport const RouterHistoryContext = createContext<RouterHistory | null>(\n  'sanity/_singletons/context/router-history',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {SanityCreateConfigContextValue} from '../../core'\n\n/**\n * @internal\n */\nexport const SanityCreateConfigContext = createContext<SanityCreateConfigContextValue>(\n  'sanity/_singletons/context/start-in-create-enabled',\n  {\n    startInCreateEnabled: false,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {HasUsedScheduledPublishing} from '../../core/scheduledPublishing/tool/contexts/useHasUsedScheduledPublishing'\n\n/**\n * @internal\n */\nexport type ScheduledPublishingEnabledContextValue =\n  | {\n      enabled: false\n      mode: null\n      hasUsedScheduledPublishing: HasUsedScheduledPublishing\n    }\n  | {\n      enabled: true\n      mode: 'default' | 'upsell'\n      hasUsedScheduledPublishing: HasUsedScheduledPublishing\n    }\n\nconst DEFAULT: ScheduledPublishingEnabledContextValue = {\n  enabled: false,\n  mode: null,\n  hasUsedScheduledPublishing: {\n    used: false,\n    loading: false,\n  },\n}\n\n/**\n * @internal\n */\nexport const ScheduledPublishingEnabledContext =\n  createContext<ScheduledPublishingEnabledContextValue>(\n    'sanity/_singletons/context/scheduled-publishing-enabled',\n    DEFAULT,\n  )\n","import {createContext} from 'sanity/_createContext'\n\nimport type {UpsellDialogViewedInfo} from '../../core/studio/upsell'\nimport type {UpsellData} from '../../core/studio/upsell/types'\n\n/**\n * @internal\n */\nexport interface SchedulePublishUpsellContextValue {\n  upsellDialogOpen: boolean\n  handleOpenDialog: (source: UpsellDialogViewedInfo['source']) => void\n  upsellData: UpsellData | null\n  telemetryLogs: {\n    dialogSecondaryClicked: () => void\n    dialogPrimaryClicked: () => void\n    panelViewed: (source: UpsellDialogViewedInfo['source']) => void\n    panelDismissed: () => void\n    panelPrimaryClicked: () => void\n    panelSecondaryClicked: () => void\n  }\n}\n\n/**\n * @internal\n */\nexport const SchedulePublishUpsellContext = createContext<SchedulePublishUpsellContextValue>(\n  'sanity/_singletons/context/schedule-publish-upsell',\n  {\n    upsellData: null,\n    handleOpenDialog: () => null,\n    upsellDialogOpen: false,\n    telemetryLogs: {\n      dialogSecondaryClicked: () => null,\n      dialogPrimaryClicked: () => null,\n      panelViewed: () => null,\n      panelDismissed: () => null,\n      panelPrimaryClicked: () => null,\n      panelSecondaryClicked: () => null,\n    },\n  },\n)\n","import type {PubSub} from 'nano-pubsub'\nimport {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport const ScrollContext = createContext<null | PubSub<Event>>(\n  'sanity/_singletons/context/scroll',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {SearchContextValue} from '../../core/studio/components/navbar/search/contexts/search/SearchContext'\n\n/**\n * @internal\n */\nexport const SearchContext = createContext<SearchContextValue | undefined>(\n  'sanity/_singletons/context/search',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport const SortableItemIdContext = createContext<string | null>(\n  'sanity/_singletons/context/sortable-item-id',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {Source} from '../../core/config/types'\n\n/**\n * @internal\n */\nexport const SourceContext = createContext<Source | null>('sanity/_singletons/context/source', null)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {StructureToolContextValue} from '../../structure/types'\n\n/**\n * @internal\n */\nexport const StructureToolContext = createContext<StructureToolContextValue | null>(\n  'sanity/_singletons/context/structure-tool',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {StudioAnnouncementsContextValue} from '../../core/studio/studioAnnouncements/types'\n\n/**\n * @internal\n */\nexport const StudioAnnouncementContext = createContext<StudioAnnouncementsContextValue | undefined>(\n  'sanity/_singletons/context/studioAnnouncements',\n  undefined,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TasksContextValue} from '../../core/tasks/context/tasks/types'\n\n/**\n * @internal\n */\nexport const TasksContext = createContext<TasksContextValue | null>(\n  'sanity/_singletons/context/tasks',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TasksEnabledContextValue} from '../../core/tasks/context/enabled/types'\n\n// NOTE: We initialize this context with a default value (`enabled: false`)\n// rather than `null` to handle cases where the tasks feature's availability\n// isn't explicitly provided by a surrounding provider component. Typically,\n// Tasks are included by default in all new Studio configurations. Therefore,\n// in the absence of a specific provider (TasksEnabledProvider), we assume that\n// the feature is disabled.\n/**\n * @internal\n */\nexport const TasksEnabledContext = createContext<TasksEnabledContextValue>(\n  'sanity/_singletons/context/tasks-enabled',\n  {\n    enabled: false,\n    mode: null,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TasksNavigationContextValue} from '../../core/tasks/context/navigation/types'\n\n/**\n * @internal\n */\nexport const TasksNavigationContext = createContext<TasksNavigationContextValue | null>(\n  'sanity/_singletons/context/tasks-navigation',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TasksUpsellContextValue} from '../../core/tasks/context/upsell/types'\n\n/**\n * @beta\n * @hidden\n */\nexport const TasksUpsellContext = createContext<TasksUpsellContextValue | null>(\n  'sanity/_singletons/context/tasks-upsell',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {TreeEditingEnabledContextValue} from '../../core/form/studio/tree-editing/context/enabled/useTreeEditingEnabled'\n\n/**\n * @internal\n */\nexport const TreeEditingEnabledContext = createContext<TreeEditingEnabledContextValue>(\n  'sanity/_singletons/context/tree-editing-enabled',\n  {\n    enabled: false,\n    legacyEditing: false,\n  },\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {UserColorManager} from '../../core/user-color/types'\n\n/**\n * @internal\n */\nexport const UserColorManagerContext = createContext<UserColorManager | null>(\n  'sanity/_singletons/context/user-color-manager',\n  null,\n)\n","import type {ValidationMarker} from '@sanity/types'\nimport {createContext} from 'sanity/_createContext'\n\n/**\n * @internal\n */\nexport const ValidationContext = createContext<ValidationMarker[]>(\n  'sanity/_singletons/context/validation',\n  [],\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {VirtualizerScrollInstance} from '../../core/form/inputs/arrays/ArrayOfObjectsInput/List/useVirtualizerScrollInstance'\n\n/**\n * This is used to store the reference to the scroll element for virtualizer\n * @internal\n */\nexport const VirtualizerScrollInstanceContext = createContext<VirtualizerScrollInstance | null>(\n  'sanity/_singletons/context/virtualizer-scroll-instance',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {Workspace} from '../../core/config/types'\n\n/**\n * @internal\n */\nexport const WorkspaceContext = createContext<Workspace | null>(\n  'sanity/_singletons/context/workspace',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {WorkspacesContextValue} from '../../core/studio/workspaces/WorkspacesContext'\n\n/** @internal */\nexport const WorkspacesContext = createContext<WorkspacesContextValue | null>(\n  'sanity/_singletons/context/workspaces',\n  null,\n)\n","import {createContext} from 'sanity/_createContext'\n\nimport type {ZIndexContextValue} from '../../core/components/zOffsets/types'\n\n/**\n * @internal\n */\nexport const zIndexContextDefaults: ZIndexContextValue = {\n  navbar: 200,\n  navbarPopover: 500000,\n  navbarDialog: 500001,\n  // pane\n  pane: 100,\n  paneHeader: [110, 15000],\n  paneFooter: [120, 20000],\n  paneResizer: [130, 25000],\n  paneDialog: [140, 5000],\n  //\n  popover: 200,\n  modal: 200,\n  movingItem: 10000,\n  drawershade: 1000000,\n  drawer: 1000001,\n  fullscreen: 1200000,\n  toast: [100, 11000],\n  // NOT IN USE\n  portal: 200,\n  dropdown: 200,\n  navbarFixed: 1010,\n  fullscreenEdit: 1050,\n  popoverBackground: 1060,\n  tooltip: 200,\n  modalBackground: 2000,\n  spinner: 3000,\n}\n\n/**\n * TODO: Rename to `ZOffsetsContext`\n *\n * @internal\n */\nexport const ZIndexContext = createContext<ZIndexContextValue>(\n  'sanity/_singletons/context/z-index',\n  zIndexContextDefaults,\n)\n"],"names":["ActiveWorkspaceMatcherContext","createContext","AddonDatasetContext","AppIdCacheContext","CalendarContext","undefined","ChangeIndicatorTrackerContextStore","ChangeIndicatorTrackerContextGetSnapshot","ColorSchemeSetValueContext","ColorSchemeValueContext","CommentInputContext","CommentsAuthoringPathContext","CommentsContext","CommentsEnabledContext","enabled","mode","CommentsIntentContext","CommentsOnboardingContext","CommentsSelectedPathContext","CommentsUpsellContext","CopyPasteContext","DiffContext","path","DocumentActionPropsContext","DocumentChangeContext","DocumentFieldActionsContext","DocumentIdContext","DocumentPaneContext","DocumentSheetListContext","EventsContext","FieldActionsContext","actions","focused","hovered","__internal_slot","__internal_comments","onMouseEnter","onMouseLeave","FormBuilderContext","FormCallbacksContext","FormFieldPresenceContext","FormValueContext","FreeTrialContext","GetFormValueContext","HoveredFieldContext","store","subscribe","getSnapshot","IsLastPaneContext","LocaleContext","MediaLibraryIdContext","MentionUserContext","NavbarContext","onSearchFullscreenOpenChange","onSearchOpenChange","searchFullscreenOpen","searchFullscreenPortalEl","searchOpen","PaneContext","PaneLayoutContext","missingContext","Error","PaneRouterContext","index","groupIndex","siblingIndex","payload","params","hasGroupSiblings","groupLength","routerPanesState","BackLink","ChildLink","ReferenceChildLink","handleEditReference","ParameterizedLink","replaceCurrent","closeCurrentAndAfter","closeCurrent","duplicateCurrent","setView","setParams","setPayload","navigateIntent","createPathWithParams","PerspectiveContext","PortableTextMarkersContext","PortableTextMemberItemElementRefsContext","BehaviorSubject","PortableTextMemberItemsContext","PresenceContext","PresenceTrackerContextStore","PresenceTrackerContextGetSnapshot","PresentationContext","PresentationDisplayedDocumentContext","PresentationDocumentContext","PresentationNavigateContext","PresentationPanelsContext","PresentationParamsContext","PresentationSharedStateContext","PreviewCardContext","selected","ReferenceInputOptionsContext","ReferenceItemRefContext","ReleasesMetadataContext","TableContext","ReleasesUpsellContext","ResourceCacheContext","ReviewChangesContext","onOpenReviewChanges","onSetFocus","isReviewChangesOpen","isInteractive","RouterContext","RouterHistoryContext","SanityCreateConfigContext","startInCreateEnabled","DEFAULT","hasUsedScheduledPublishing","used","loading","ScheduledPublishingEnabledContext","SchedulePublishUpsellContext","upsellData","handleOpenDialog","upsellDialogOpen","telemetryLogs","dialogSecondaryClicked","dialogPrimaryClicked","panelViewed","panelDismissed","panelPrimaryClicked","panelSecondaryClicked","ScrollContext","SearchContext","SortableItemIdContext","SourceContext","StructureToolContext","StudioAnnouncementContext","TasksContext","TasksEnabledContext","TasksNavigationContext","TasksUpsellContext","TreeEditingEnabledContext","legacyEditing","UserColorManagerContext","ValidationContext","VirtualizerScrollInstanceContext","WorkspaceContext","WorkspacesContext","zIndexContextDefaults","navbar","navbarPopover","navbarDialog","pane","paneHeader","paneFooter","paneResizer","paneDialog","popover","modal","movingItem","drawershade","drawer","fullscreen","toast","portal","dropdown","navbarFixed","fullscreenEdit","popoverBackground","tooltip","modalBackground","spinner","ZIndexContext"],"mappings":"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"}