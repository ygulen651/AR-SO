{"version":3,"file":"deploySchemasAction.js","sources":["../../src/_internal/cli/actions/schema/utils/workspaceSchemaId.ts","../../src/_internal/cli/actions/schema/deploySchemasAction.ts"],"sourcesContent":["import {\n  type DefaultWorkspaceSchemaId,\n  SANITY_WORKSPACE_SCHEMA_ID_PREFIX,\n  type WorkspaceSchemaId,\n} from '../../../../manifest/manifestTypes'\nimport {validForNamesChars, validForNamesPattern} from './schemaStoreValidation'\n\nexport function getWorkspaceSchemaId(args: {workspaceName: string; tag?: string}) {\n  const {workspaceName: rawWorkspaceName, tag} = args\n\n  let workspaceName = rawWorkspaceName\n  let idWarning: string | undefined\n\n  // The HTTP API replaces periods with _ in the workspace name, so the CLI should too\n  if (!workspaceName.match(validForNamesPattern)) {\n    workspaceName = workspaceName.replace(new RegExp(`[^${validForNamesChars}]`, 'g'), '_')\n    idWarning = [\n      `Workspace \"${rawWorkspaceName}\" contains characters unsupported by schema _id [${validForNamesChars}], they will be replaced with _.`,\n      'This could lead duplicate schema ids: consider renaming your workspace.',\n    ].join('\\n')\n  }\n\n  const safeBaseId: DefaultWorkspaceSchemaId = `${SANITY_WORKSPACE_SCHEMA_ID_PREFIX}.${workspaceName}`\n  return {\n    safeBaseId,\n    safeTaggedId: `${safeBaseId}${tag ? (`.${tag}` as const) : ''}` satisfies WorkspaceSchemaId,\n    idWarning,\n  }\n}\n","import {type CliCommandContext, type CliOutputter} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\nimport chalk from 'chalk'\nimport partition from 'lodash/partition'\n\nimport {\n  CURRENT_WORKSPACE_SCHEMA_VERSION,\n  type ManifestWorkspaceFile,\n  type StoredWorkspaceSchema,\n} from '../../../manifest/manifestTypes'\nimport {SchemaDeploy} from './__telemetry__/schemaStore.telemetry'\nimport {type SchemaStoreActionResult, type SchemaStoreContext} from './schemaStoreTypes'\nimport {createManifestExtractor, ensureManifestExtractSatisfied} from './utils/mainfestExtractor'\nimport {type CreateManifestReader, createManifestReader} from './utils/manifestReader'\nimport {createSchemaApiClient} from './utils/schemaApiClient'\nimport {projectIdDatasetPair} from './utils/schemaStoreOutStrings'\nimport {\n  FlagValidationError,\n  parseDeploySchemasConfig,\n  SCHEMA_PERMISSION_HELP_TEXT,\n  type SchemaStoreCommonFlags,\n} from './utils/schemaStoreValidation'\nimport {getWorkspaceSchemaId} from './utils/workspaceSchemaId'\n\nexport interface DeploySchemasFlags extends SchemaStoreCommonFlags {\n  'workspace'?: string\n  'tag'?: string\n  'schema-required'?: boolean\n}\n\nexport default function deploySchemasActionForCommand(\n  flags: DeploySchemasFlags,\n  context: CliCommandContext,\n): Promise<SchemaStoreActionResult> {\n  return deploySchemasAction(\n    {\n      ...flags,\n      //invoking the command through CLI implies that schema is required\n      'schema-required': true,\n    },\n    {\n      ...context,\n      manifestExtractor: createManifestExtractor(context),\n    },\n  )\n}\n\n/**\n *\n * Stores schemas for configured workspaces into workspace datasets.\n *\n * Workspaces are determined by on-disk manifest file – not directly from sanity.config.\n * All schema store actions require a manifest to exist, so we regenerate it by default.\n * Manifest generation can be optionally disabled with --no-manifest-extract.\n * In this case the command uses and existing file or throws when missing.\n */\nexport async function deploySchemasAction(\n  flags: DeploySchemasFlags,\n  context: SchemaStoreContext,\n): Promise<SchemaStoreActionResult> {\n  const {workspaceName, verbose, tag, manifestDir, extractManifest, schemaRequired} =\n    parseDeploySchemasConfig(flags, context)\n\n  const {output, apiClient, jsonReader, manifestExtractor, telemetry} = context\n\n  // prettier-ignore\n  if (!(await ensureManifestExtractSatisfied({schemaRequired, extractManifest, manifestDir, manifestExtractor, output, telemetry}))) {\n    return 'failure'\n  }\n\n  const trace = context.telemetry.trace(SchemaDeploy, {\n    manifestDir,\n    schemaRequired,\n    workspaceName,\n    tag,\n    extractManifest,\n  })\n\n  try {\n    trace.start()\n    const {client} = createSchemaApiClient(apiClient)\n    const manifestReader = createManifestReader({manifestDir, output, jsonReader})\n    const manifest = await manifestReader.getManifest()\n\n    const storeWorkspaceSchema = createStoreWorkspaceSchema({\n      tag,\n      verbose,\n      client,\n      output,\n      manifestReader,\n    })\n\n    const targetWorkspaces = manifest.workspaces.filter(\n      (workspace) => !workspaceName || workspace.name === workspaceName,\n    )\n\n    if (!targetWorkspaces.length) {\n      if (workspaceName) {\n        throw new FlagValidationError(`Found no workspaces named \"${workspaceName}\"`)\n      } else {\n        throw new Error(`Workspace array in manifest is empty.`)\n      }\n    }\n\n    //known caveat: we _dont_ rollback failed operations or partial success\n    const results = await Promise.allSettled(\n      targetWorkspaces.map(async (workspace: ManifestWorkspaceFile): Promise<void> => {\n        await storeWorkspaceSchema(workspace)\n      }),\n    )\n\n    const [successes, failures] = partition(results, (result) => result.status === 'fulfilled')\n    if (failures.length) {\n      throw new Error(\n        `Failed to deploy ${failures.length}/${targetWorkspaces.length} schemas. Successfully deployed ${successes.length}/${targetWorkspaces.length} schemas.`,\n      )\n    }\n\n    trace.complete()\n    output.success(`Deployed ${successes.length}/${targetWorkspaces.length} schemas`)\n    return 'success'\n  } catch (err) {\n    trace.error(err)\n    if (schemaRequired || err instanceof FlagValidationError) {\n      throw err\n    } else {\n      output.print(`↳ Error when storing schemas:\\n  ${err.message}`)\n      return 'failure'\n    }\n  } finally {\n    context.output.print(\n      `${chalk.gray('↳ List deployed schemas with:')} ${chalk.cyan('sanity schema list')}`,\n    )\n  }\n}\n\nfunction createStoreWorkspaceSchema(args: {\n  tag?: string\n  verbose: boolean\n  client: SanityClient\n  output: CliOutputter\n  manifestReader: CreateManifestReader\n}): (workspace: ManifestWorkspaceFile) => Promise<void> {\n  const {tag, verbose, client, output, manifestReader} = args\n\n  return async (workspace) => {\n    const {safeBaseId: id, idWarning} = getWorkspaceSchemaId({\n      workspaceName: workspace.name,\n      tag,\n    })\n    if (idWarning) output.warn(idWarning)\n\n    try {\n      const schema = await manifestReader.getWorkspaceSchema(workspace.name)\n\n      const storedWorkspaceSchema: Omit<StoredWorkspaceSchema, '_id' | '_type'> = {\n        version: CURRENT_WORKSPACE_SCHEMA_VERSION,\n        tag,\n        workspace: {\n          name: workspace.name,\n          title: workspace.title,\n        },\n        // the API will stringify the schema – we send as JSON\n        schema,\n      }\n\n      await client\n        .withConfig({dataset: workspace.dataset, projectId: workspace.projectId})\n        .request({\n          method: 'PUT',\n          url: `/projects/${workspace.projectId}/datasets/${workspace.dataset}/schemas`,\n          body: {\n            schemas: [storedWorkspaceSchema],\n          },\n        })\n\n      if (verbose) {\n        output.print(\n          chalk.gray(\n            `↳ schemaId: ${id}, projectId: ${workspace.projectId}, dataset: ${workspace.dataset}`,\n          ),\n        )\n      }\n    } catch (err) {\n      if ('statusCode' in err && err?.statusCode === 401) {\n        output.error(\n          `↳ No permissions to write schema for workspace \"${workspace.name}\" – ${projectIdDatasetPair(workspace)}. ${\n            SCHEMA_PERMISSION_HELP_TEXT\n          }:\\n  ${chalk.red(`${err.message}`)}`,\n        )\n      } else {\n        output.error(\n          `↳ Error deploying schema for workspace \"${workspace.name}\":\\n  ${chalk.red(`${err.message}`)}`,\n        )\n      }\n\n      throw err\n    }\n  }\n}\n"],"names":["getWorkspaceSchemaId","args","workspaceName","rawWorkspaceName","tag","idWarning","match","validForNamesPattern","replace","RegExp","validForNamesChars","join","safeBaseId","SANITY_WORKSPACE_SCHEMA_ID_PREFIX","safeTaggedId","deploySchemasActionForCommand","flags","context","deploySchemasAction","manifestExtractor","createManifestExtractor","verbose","manifestDir","extractManifest","schemaRequired","parseDeploySchemasConfig","output","apiClient","jsonReader","telemetry","ensureManifestExtractSatisfied","trace","SchemaDeploy","start","client","createSchemaApiClient","manifestReader","createManifestReader","manifest","getManifest","storeWorkspaceSchema","createStoreWorkspaceSchema","targetWorkspaces","workspaces","filter","workspace","name","length","FlagValidationError","Error","results","Promise","allSettled","map","successes","failures","partition","result","status","complete","success","err","error","print","message","chalk","gray","cyan","id","warn","schema","getWorkspaceSchema","storedWorkspaceSchema","version","CURRENT_WORKSPACE_SCHEMA_VERSION","title","withConfig","dataset","projectId","request","method","url","body","schemas","statusCode","projectIdDatasetPair","SCHEMA_PERMISSION_HELP_TEXT","red"],"mappings":"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"}