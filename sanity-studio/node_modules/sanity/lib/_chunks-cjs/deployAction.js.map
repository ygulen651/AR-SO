{"version":3,"file":"deployAction.js","sources":["../../src/_internal/cli/actions/app/deployAction.ts"],"sourcesContent":["/* eslint-disable max-statements */\nimport path from 'node:path'\nimport zlib from 'node:zlib'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport tar from 'tar-fs'\n\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport {\n  checkDir,\n  createDeployment,\n  debug,\n  dirIsEmptyOrNonExistent,\n  getInstalledSanityVersion,\n  getOrCreateApplication,\n  getOrCreateUserApplicationFromConfig,\n  type UserApplication,\n} from '../deploy/helpers'\nimport buildSanityApp, {type BuildSanityAppCommandFlags} from './buildAction'\n\nexport interface DeployAppActionFlags extends BuildSanityAppCommandFlags {\n  build?: boolean\n}\n\nexport default async function deployAppAction(\n  args: CliCommandArguments<DeployAppActionFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, workDir, chalk, output, prompt, cliConfig} = context\n  const flags = {build: true, ...args.extOptions}\n  const customSourceDir = args.argsWithoutOptions[0]\n  const sourceDir = path.resolve(process.cwd(), customSourceDir || path.join(workDir, 'dist'))\n  // not really required yet, but will be required in the future\n  const isAutoUpdating = shouldAutoUpdate({flags, cliConfig})\n\n  const installedSanityVersion = await getInstalledSanityVersion()\n  const appId = cliConfig && 'app' in cliConfig && cliConfig.app?.id\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: false, // custom apps are not project-specific\n  }).withConfig({apiVersion: 'v2024-08-01'})\n\n  if (customSourceDir) {\n    let relativeOutput = path.relative(process.cwd(), sourceDir)\n    if (relativeOutput[0] !== '.') {\n      relativeOutput = `./${relativeOutput}`\n    }\n\n    const isEmpty = await dirIsEmptyOrNonExistent(sourceDir)\n    const shouldProceed =\n      isEmpty ||\n      (await prompt.single({\n        type: 'confirm',\n        message: `\"${relativeOutput}\" is not empty, do you want to proceed?`,\n        default: false,\n      }))\n\n    if (!shouldProceed) {\n      output.print('Cancelled.')\n      return\n    }\n\n    output.print(`Building to ${relativeOutput}\\n`)\n  }\n\n  // Check that the project exists\n  let spinner = output.spinner('Checking application info').start()\n\n  let userApplication: UserApplication\n\n  try {\n    const configParams = {\n      client,\n      context,\n      spinner,\n    }\n\n    // If the user has provided an appId in the config, use that\n    if (appId) {\n      userApplication = await getOrCreateUserApplicationFromConfig({...configParams, appId})\n    } else {\n      userApplication = await getOrCreateApplication(configParams)\n    }\n  } catch (err) {\n    if (err.message) {\n      output.error(chalk.red(err.message))\n      return\n    }\n\n    debug('Error creating user application', err)\n    throw err\n  }\n\n  // Always build the project, unless --no-build is passed\n  const shouldBuild = flags.build\n  if (shouldBuild) {\n    const buildArgs = {\n      ...args,\n      extOptions: flags,\n      argsWithoutOptions: [customSourceDir].filter(Boolean),\n    }\n    const {didCompile} = await buildSanityApp(buildArgs, context, {basePath: '/'})\n\n    if (!didCompile) {\n      return\n    }\n  }\n\n  // Ensure that the directory exists, is a directory and seems to have valid content\n  spinner = output.spinner('Verifying local content').start()\n  try {\n    await checkDir(sourceDir)\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    debug('Error checking directory', err)\n    throw err\n  }\n\n  // Now create a tarball of the given directory\n  const parentDir = path.dirname(sourceDir)\n  const base = path.basename(sourceDir)\n  const tarball = tar.pack(parentDir, {entries: [base]}).pipe(zlib.createGzip())\n\n  spinner = output.spinner('Deploying...').start()\n  try {\n    await createDeployment({\n      client,\n      applicationId: userApplication.id,\n      version: installedSanityVersion,\n      isAutoUpdating,\n      tarball,\n      isApp: true,\n    })\n\n    spinner.succeed()\n\n    // And let the user know we're done\n    output.print(`\\nSuccess! Application deployed`)\n\n    if (!appId) {\n      output.print(`\\nAdd ${chalk.cyan(`id: '${userApplication.id}'`)}`)\n      output.print('to `app` in sanity.cli.js or sanity.cli.ts')\n      output.print(`to avoid prompting on next deploy.`)\n    }\n  } catch (err) {\n    spinner.fail()\n    debug('Error deploying application', err)\n    throw err\n  }\n}\n"],"names":["deployAppAction","args","context","apiClient","workDir","chalk","output","prompt","cliConfig","flags","build","extOptions","customSourceDir","argsWithoutOptions","sourceDir","path","resolve","process","cwd","join","isAutoUpdating","shouldAutoUpdate","installedSanityVersion","getInstalledSanityVersion","appId","app","id","client","requireUser","requireProject","withConfig","apiVersion","relativeOutput","relative","dirIsEmptyOrNonExistent","single","type","message","default","print","spinner","start","userApplication","configParams","getOrCreateUserApplicationFromConfig","getOrCreateApplication","err","error","red","debug","buildArgs","filter","Boolean","didCompile","buildSanityApp","basePath","checkDir","succeed","fail","parentDir","dirname","base","basename","tarball","tar","pack","entries","pipe","zlib","createGzip","createDeployment","applicationId","version","isApp","cyan"],"mappings":";;;;;;AAwB8BA,eAAAA,gBAC5BC,MACAC,SACe;AACT,QAAA;AAAA,IAACC;AAAAA,IAAWC;AAAAA,IAASC;AAAAA,IAAOC;AAAAA,IAAQC;AAAAA,IAAQC;AAAAA,EAAAA,IAAaN,SACzDO,QAAQ;AAAA,IAACC,OAAO;AAAA,IAAM,GAAGT,KAAKU;AAAAA,EAAAA,GAC9BC,kBAAkBX,KAAKY,mBAAmB,CAAC,GAC3CC,YAAYC,cAAAA,QAAKC,QAAQC,QAAQC,OAAON,mBAAmBG,sBAAKI,KAAKf,SAAS,MAAM,CAAC,GAErFgB,iBAAiBC,kCAAiB;AAAA,IAACZ;AAAAA,IAAOD;AAAAA,EAAU,CAAA,GAEpDc,yBAAyB,MAAMC,kCAC/BC,GAAAA,QAAQhB,aAAa,SAASA,aAAaA,UAAUiB,KAAKC,IAE1DC,SAASxB,UAAU;AAAA,IACvByB,aAAa;AAAA,IACbC,gBAAgB;AAAA;AAAA,EACjB,CAAA,EAAEC,WAAW;AAAA,IAACC,YAAY;AAAA,EAAA,CAAc;AAEzC,MAAInB,iBAAiB;AACnB,QAAIoB,iBAAiBjB,cAAAA,QAAKkB,SAAShB,QAAQC,OAAOJ,SAAS;AAc3D,QAbIkB,eAAe,CAAC,MAAM,QACxBA,iBAAiB,KAAKA,cAAc,KAYlC,EATY,MAAME,QAAwBpB,wBAAAA,SAAS,KAGpD,MAAMP,OAAO4B,OAAO;AAAA,MACnBC,MAAM;AAAA,MACNC,SAAS,IAAIL,cAAc;AAAA,MAC3BM,SAAS;AAAA,IACV,CAAA,IAEiB;AAClBhC,aAAOiC,MAAM,YAAY;AACzB;AAAA,IAAA;AAGKA,WAAAA,MAAM,eAAeP,cAAc;AAAA,CAAI;AAAA,EAAA;AAIhD,MAAIQ,UAAUlC,OAAOkC,QAAQ,2BAA2B,EAAEC,SAEtDC;AAEA,MAAA;AACF,UAAMC,eAAe;AAAA,MACnBhB;AAAAA,MACAzB;AAAAA,MACAsC;AAAAA,IACF;AAGIhB,YACFkB,kBAAkB,MAAME,6CAAqC;AAAA,MAAC,GAAGD;AAAAA,MAAcnB;AAAAA,IAAM,CAAA,IAErFkB,kBAAkB,MAAMG,+BAAuBF,YAAY;AAAA,WAEtDG,KAAK;AACZ,QAAIA,IAAIT,SAAS;AACf/B,aAAOyC,MAAM1C,MAAM2C,IAAIF,IAAIT,OAAO,CAAC;AACnC;AAAA,IAAA;AAGI,UAAAY,cAAA,mCAAmCH,GAAG,GACtCA;AAAAA,EAAAA;AAKR,MADoBrC,MAAMC,OACT;AACf,UAAMwC,YAAY;AAAA,MAEhBvC,YAAYF;AAAAA,MACZI,oBAAoB,CAACD,eAAe,EAAEuC,OAAOC,OAAO;AAAA,IAAA,GAEhD;AAAA,MAACC;AAAAA,IAAAA,IAAc,MAAMC,YAAAA,QAAeJ,WAAWhD,SAAS;AAAA,MAACqD,UAAU;AAAA,IAAA,CAAI;AAE7E,QAAI,CAACF;AACH;AAAA,EAAA;AAKJb,YAAUlC,OAAOkC,QAAQ,yBAAyB,EAAEC,MAAM;AACtD,MAAA;AACF,UAAMe,iBAAS1C,SAAS,GACxB0B,QAAQiB,QAAQ;AAAA,WACTX,KAAK;AACZN,UAAAA,QAAQkB,KAAK,GACbT,QAAM,MAAA,4BAA4BH,GAAG,GAC/BA;AAAAA,EAAAA;AAIR,QAAMa,YAAY5C,cAAAA,QAAK6C,QAAQ9C,SAAS,GAClC+C,OAAO9C,cAAAA,QAAK+C,SAAShD,SAAS,GAC9BiD,UAAUC,aAAAA,QAAIC,KAAKN,WAAW;AAAA,IAACO,SAAS,CAACL,IAAI;AAAA,EAAE,CAAA,EAAEM,KAAKC,sBAAKC,YAAY;AAE7E7B,YAAUlC,OAAOkC,QAAQ,cAAc,EAAEC,MAAM;AAC3C,MAAA;AACF,UAAM6B,yBAAiB;AAAA,MACrB3C;AAAAA,MACA4C,eAAe7B,gBAAgBhB;AAAAA,MAC/B8C,SAASlD;AAAAA,MACTF;AAAAA,MACA2C;AAAAA,MACAU,OAAO;AAAA,IACR,CAAA,GAEDjC,QAAQiB,WAGRnD,OAAOiC,MAAM;AAAA,8BAAiC,GAEzCf,UACHlB,OAAOiC,MAAM;AAAA,MAASlC,MAAMqE,KAAK,QAAQhC,gBAAgBhB,EAAE,GAAG,CAAC,EAAE,GACjEpB,OAAOiC,MAAM,4CAA4C,GACzDjC,OAAOiC,MAAM,oCAAoC;AAAA,WAE5CO,KAAK;AACZN,UAAAA,QAAQkB,KAAK,GACbT,QAAM,MAAA,+BAA+BH,GAAG,GAClCA;AAAAA,EAAAA;AAEV;;"}