{"version":3,"file":"devAction.js","sources":["../../src/_internal/cli/actions/app/devAction.ts"],"sourcesContent":["import {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport chalk from 'chalk'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {startDevServer} from '../../server/devServer'\nimport {gracefulServerDeath} from '../../util/servers'\nimport {getCoreAppURL, getDevServerConfig, type StartDevServerCommandFlags} from '../dev/devAction'\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  // Using slice(1) to remove the first argument, which is the command `dev` path to the CLI\n  return yargs(hideBin(args.argv || process.argv).slice(1))\n    .options('host', {type: 'string'})\n    .options('port', {type: 'number'})\n    .options('load-in-dashboard', {type: 'boolean', default: true}).argv\n}\n\nexport default async function startAppDevServer(\n  args: CliCommandArguments<StartDevServerCommandFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const flags = await parseCliFlags(args)\n  const {output, workDir, cliConfig} = context\n\n  if (!flags.loadInDashboard) {\n    output.warn(`Apps cannot run without the Sanity dashboard`)\n    output.warn(`Starting dev server with the --load-in-dashboard flag set to true`)\n  }\n\n  let organizationId: string | undefined\n  if (cliConfig && 'app' in cliConfig && cliConfig.app?.organizationId) {\n    organizationId = cliConfig.app.organizationId\n  }\n\n  if (!organizationId) {\n    output.error(`Apps require an organization ID (orgId) specified in your sanity.cli.ts file`)\n    process.exit(1)\n  }\n\n  // Try to load CLI configuration from sanity.cli.(js|ts)\n  const config = getDevServerConfig({\n    flags,\n    workDir,\n    cliConfig,\n    output,\n  })\n\n  try {\n    const spinner = output.spinner('Starting dev server').start()\n    await startDevServer({...config, spinner, skipStartLog: true, isApp: true})\n\n    output.print(`Dev server started on port ${config.httpPort}`)\n    output.print(`View your app in the Sanity dashboard here:`)\n    output.print(\n      chalk.blue(\n        chalk.underline(\n          await getCoreAppURL({\n            organizationId,\n            httpHost: config.httpHost,\n            httpPort: config.httpPort,\n          }),\n        ),\n      ),\n    )\n  } catch (err) {\n    gracefulServerDeath('dev', config.httpHost, config.httpPort, err)\n  }\n}\n"],"names":["parseCliFlags","args","yargs","hideBin","argv","process","slice","options","type","default","startAppDevServer","context","flags","output","workDir","cliConfig","loadInDashboard","warn","organizationId","app","error","exit","config","getDevServerConfig","spinner","start","startDevServer","skipStartLog","isApp","print","httpPort","chalk","blue","underline","getCoreAppURL","httpHost","err","gracefulServerDeath"],"mappings":";;;;;;AASA,SAASA,cAAcC,MAAyB;AAE9C,SAAOC,uBAAMC,QAAAA,QAAQF,KAAKG,QAAQC,QAAQD,IAAI,EAAEE,MAAM,CAAC,CAAC,EACrDC,QAAQ,QAAQ;AAAA,IAACC,MAAM;AAAA,EAAA,CAAS,EAChCD,QAAQ,QAAQ;AAAA,IAACC,MAAM;AAAA,EAAA,CAAS,EAChCD,QAAQ,qBAAqB;AAAA,IAACC,MAAM;AAAA,IAAWC,SAAS;AAAA,EAAK,CAAA,EAAEL;AACpE;AAE8BM,eAAAA,kBAC5BT,MACAU,SACe;AACf,QAAMC,QAAQ,MAAMZ,cAAcC,IAAI,GAChC;AAAA,IAACY;AAAAA,IAAQC;AAAAA,IAASC;AAAAA,EAAAA,IAAaJ;AAEhCC,QAAMI,oBACTH,OAAOI,KAAK,8CAA8C,GAC1DJ,OAAOI,KAAK,mEAAmE;AAG7EC,MAAAA;AACAH,eAAa,SAASA,aAAaA,UAAUI,KAAKD,mBACpDA,iBAAiBH,UAAUI,IAAID,iBAG5BA,mBACHL,OAAOO,MAAM,8EAA8E,GAC3Ff,QAAQgB,KAAK,CAAC;AAIhB,QAAMC,SAASC,UAAAA,mBAAmB;AAAA,IAChCX;AAAAA,IACAE;AAAAA,IACAC;AAAAA,IACAF;AAAAA,EAAAA,CACD;AAEG,MAAA;AACF,UAAMW,UAAUX,OAAOW,QAAQ,qBAAqB,EAAEC,MAAM;AAC5D,UAAMC,yBAAe;AAAA,MAAC,GAAGJ;AAAAA,MAAQE;AAAAA,MAASG,cAAc;AAAA,MAAMC,OAAO;AAAA,IAAA,CAAK,GAE1Ef,OAAOgB,MAAM,8BAA8BP,OAAOQ,QAAQ,EAAE,GAC5DjB,OAAOgB,MAAM,6CAA6C,GAC1DhB,OAAOgB,MACLE,eAAAA,QAAMC,KACJD,eAAME,QAAAA,UACJ,MAAMC,wBAAc;AAAA,MAClBhB;AAAAA,MACAiB,UAAUb,OAAOa;AAAAA,MACjBL,UAAUR,OAAOQ;AAAAA,IAClB,CAAA,CACH,CACF,CACF;AAAA,WACOM,KAAK;AACZC,YAAAA,oBAAoB,OAAOf,OAAOa,UAAUb,OAAOQ,UAAUM,GAAG;AAAA,EAAA;AAEpE;;"}