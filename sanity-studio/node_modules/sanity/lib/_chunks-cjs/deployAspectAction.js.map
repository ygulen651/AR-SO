{"version":3,"file":"deployAspectAction.js","sources":["../../src/_internal/cli/actions/media/deployAspectAction.ts"],"sourcesContent":["import fs from 'node:fs/promises'\nimport {EOL} from 'node:os'\nimport path from 'node:path'\n\nimport {type CliCommandAction, type CliCommandContext, type SanityClient} from '@sanity/cli'\nimport {validateMediaLibraryAssetAspect} from '@sanity/schema/_internal'\nimport {\n  isAssetAspect,\n  type MediaLibraryAssetAspectDocument,\n  type MultipleMutationResult,\n  type SchemaValidationProblem,\n} from '@sanity/types'\nimport {type Chalk} from 'chalk'\nimport {register} from 'esbuild-register/dist/node'\nimport pluralize from 'pluralize-esm'\nimport {\n  catchError,\n  filter,\n  finalize,\n  from,\n  groupBy,\n  map,\n  mergeMap,\n  type MonoTypeOperatorFunction,\n  type Observable,\n  of,\n  type OperatorFunction,\n  pipe,\n  scan,\n  switchMap,\n  takeLast,\n  tap,\n  toArray,\n  zip,\n} from 'rxjs'\n\nimport {ASPECT_FILE_EXTENSIONS, MINIMUM_API_VERSION} from './constants'\nimport {determineTargetMediaLibrary} from './lib/determineTargetMediaLibrary'\nimport {withMediaLibraryConfig} from './lib/withMediaLibraryConfig'\n\ninterface DeployAspectFlags {\n  'media-library-id'?: string\n  'aspect-id'?: string\n  'all'?: boolean\n}\n\ntype Result =\n  | {\n      status: 'failure'\n      reason: 'invalidAspect' | 'failedMutation'\n      aspects: AspectContainer[]\n      error?: unknown\n    }\n  | {\n      status: 'success'\n      aspects: AspectContainer[]\n    }\n\ntype Status = 'valid' | 'invalid'\n\ntype AspectsPair = [status: Status, aspects: AspectContainer[]]\n\ntype AspectContainer = {\n  filename: string\n  validationErrors: SchemaValidationProblem[][]\n} & (\n  | {\n      status: Extract<Status, 'valid'>\n      aspect: MediaLibraryAssetAspectDocument\n    }\n  | {\n      status: Extract<Status, 'invalid'>\n      aspect: unknown\n    }\n)\n\nconst deployAspectAction: CliCommandAction<DeployAspectFlags> = async (args, context) => {\n  const {output, apiClient, mediaLibrary} = withMediaLibraryConfig(context)\n  const [aspectId] = args.argsWithoutOptions\n  const all = args.extOptions.all ?? false\n\n  if (!all && typeof aspectId === 'undefined') {\n    output.error(\n      'Specify an aspect name, or use the `--all` option to deploy all aspect definitions.',\n    )\n    return\n  }\n\n  if (all && typeof aspectId !== 'undefined') {\n    output.error('Specified both an aspect name and `--all`.')\n    return\n  }\n\n  const mediaLibraryId =\n    args.extOptions['media-library-id'] ?? (await determineTargetMediaLibrary(context))\n\n  const client = apiClient().withConfig({\n    apiVersion: MINIMUM_API_VERSION,\n    requestTagPrefix: 'sanity.mediaLibraryCli',\n  })\n\n  importAspects({\n    aspectsPath: mediaLibrary.aspectsPath,\n    filterAspects: (entry) => {\n      if (all) {\n        return true\n      }\n\n      if (typeof entry === 'object' && entry !== null && '_id' in entry) {\n        return entry._id === aspectId\n      }\n\n      return false\n    },\n  })\n    .pipe(\n      mergeMap<AspectsPair, Observable<Result>>(([status, aspects]) => {\n        if (status === 'invalid') {\n          return of<Result>({\n            status: 'failure',\n            reason: 'invalidAspect',\n            aspects,\n          })\n        }\n\n        return of(aspects).pipe(\n          deployAspects({\n            client,\n            mediaLibraryId,\n            dryRun: false,\n          }),\n        )\n      }),\n      reportResult({context}),\n      reportUnfoundAspect({aspectId, context}),\n    )\n    .subscribe()\n}\n\nexport default deployAspectAction\n\nfunction importAspects({\n  aspectsPath,\n  filterAspects = () => true,\n}: {\n  aspectsPath: string\n  filterAspects?: (aspect: unknown) => boolean\n}): Observable<AspectsPair> {\n  let unregister: (() => void) | undefined\n\n  const entries = fs.readdir(aspectsPath, {\n    withFileTypes: true,\n  })\n\n  return from(entries).pipe(\n    tap({\n      subscribe() {\n        if (!__DEV__) {\n          unregister = register({\n            target: `node${process.version.slice(1)}`,\n            supported: {'dynamic-import': true},\n          }).unregister\n        }\n      },\n    }),\n    mergeMap((entry) => from(entry)),\n    filter((file) => file.isFile()),\n    filter((file) => ASPECT_FILE_EXTENSIONS.includes(path.extname(file.name))),\n    switchMap((file) => importAspect({aspectsPath, filename: file.name})),\n    map(([filename, maybeAspect]) => {\n      if (!isAssetAspect(maybeAspect)) {\n        return {\n          status: 'invalid' as const,\n          aspect: maybeAspect,\n          validationErrors: [],\n          filename,\n        }\n      }\n\n      const [valid, errors] = validateMediaLibraryAssetAspect(maybeAspect.definition)\n\n      if (!valid) {\n        return {\n          status: 'invalid' as const,\n          aspect: maybeAspect,\n          validationErrors: errors,\n          filename,\n        }\n      }\n\n      return {\n        status: 'valid' as const,\n        aspect: maybeAspect,\n        validationErrors: [],\n        filename,\n      }\n    }),\n    groupBy<AspectContainer, 'valid' | 'invalid'>((maybeAspect) => maybeAspect.status),\n    mergeMap(\n      (group) =>\n        zip(\n          of(group.key),\n          group.pipe(\n            filter(({aspect}) => filterAspects(aspect)),\n            toArray(),\n          ),\n        ) as Observable<AspectsPair>,\n    ),\n    finalize(() => unregister?.()),\n  )\n}\n\nfunction importAspect({\n  aspectsPath,\n  filename,\n}: {\n  aspectsPath: string\n  filename: string\n}): Observable<[filename: string, aspect: MediaLibraryAssetAspectDocument]> {\n  // eslint-disable-next-line import/no-dynamic-require\n  return of([filename, require(path.resolve(aspectsPath, filename)).default])\n}\n\nfunction deployAspects({\n  client,\n  dryRun,\n  mediaLibraryId,\n}: {\n  client: SanityClient\n  dryRun: boolean\n  mediaLibraryId: string\n}): OperatorFunction<AspectContainer[], Result> {\n  return pipe(\n    filter((aspects) => aspects.length !== 0),\n    switchMap((aspects) => {\n      return client.observable\n        .request<MultipleMutationResult>({\n          method: 'POST',\n          uri: `/media-libraries/${mediaLibraryId}/mutate`,\n          tag: 'deployAspects',\n          query: {\n            dryRun: String(dryRun),\n          },\n          body: {\n            mutations: aspects.map(({aspect}) => ({\n              createOrReplace: aspect,\n            })),\n          },\n        })\n        .pipe(\n          mergeMap(() =>\n            of<Result>({\n              status: 'success',\n              aspects,\n            }),\n          ),\n          catchError((error) =>\n            of<Result>({\n              status: 'failure',\n              reason: 'failedMutation',\n              error: error.message,\n              aspects,\n            }),\n          ),\n        )\n    }),\n  )\n}\n\nfunction reportResult({context}: {context: CliCommandContext}): MonoTypeOperatorFunction<Result> {\n  return tap((result) => {\n    const {output, chalk} = context\n\n    const list = formatAspectList({\n      aspects: result.aspects,\n      chalk,\n    })\n\n    if (result.status === 'success' && result.aspects.length !== 0) {\n      output.print()\n      output.success(\n        chalk.bold(\n          `Deployed ${result.aspects.length} ${pluralize('aspect', result.aspects.length)}`,\n        ),\n      )\n      output.print(list)\n    }\n\n    if (\n      result.status === 'failure' &&\n      result.aspects.length !== 0 &&\n      result.reason === 'invalidAspect'\n    ) {\n      output.print()\n      output.warn(\n        chalk.bold(\n          `Skipped ${result.aspects.length} invalid ${pluralize('aspect', result.aspects.length)}`,\n        ),\n      )\n      output.print(list)\n    }\n\n    if (\n      result.status === 'failure' &&\n      result.aspects.length !== 0 &&\n      result.reason === 'failedMutation'\n    ) {\n      output.print()\n      output.error(\n        chalk.bold(\n          `Failed to deploy ${result.aspects.length} ${pluralize('aspect', result.aspects.length)}`,\n        ),\n      )\n      output.print(list)\n      output.print()\n      output.print(chalk.red(result.error))\n    }\n  })\n}\n\nfunction reportUnfoundAspect({\n  aspectId,\n  context,\n}: {\n  context: CliCommandContext\n  aspectId?: string\n}): OperatorFunction<Result, AspectContainer[]> {\n  const {output, chalk} = context\n\n  return pipe(\n    scan<Result, AspectContainer[]>((aspects, result) => aspects.concat(result.aspects), []),\n    takeLast(1),\n    tap((aspects) => {\n      const aspectNotFound = aspects.length === 0 && aspectId\n      if (aspectNotFound) {\n        output.print()\n        output.error(`Could not find aspect: ${chalk.bold(aspectId)}`)\n      }\n    }),\n  )\n}\n\nfunction formatAspectList({aspects, chalk}: {aspects: AspectContainer[]; chalk: Chalk}): string {\n  return aspects\n    .map(({aspect, filename, validationErrors}) => {\n      const label =\n        typeof aspect === 'object' &&\n        aspect !== null &&\n        '_id' in aspect &&\n        typeof aspect._id !== 'undefined'\n          ? aspect._id\n          : 'Unnamed aspect'\n\n      const simplifiedErrors = validationErrors.flatMap((group) =>\n        group.map(({message}) => message),\n      )\n\n      const errorLabel = simplifiedErrors.length === 0 ? '' : ` ${chalk.bgRed(simplifiedErrors[0])}`\n\n      const remainingErrorsCount = simplifiedErrors.length - 1\n\n      const remainingErrorsLabel =\n        remainingErrorsCount > 0\n          ? chalk.italic(\n              ` and ${simplifiedErrors.length - 1} other ${pluralize('error', remainingErrorsCount)}`,\n            )\n          : ''\n\n      return `  - ${label} ${chalk.dim(filename)}${errorLabel}${remainingErrorsLabel}`\n    })\n    .join(EOL)\n}\n"],"names":["deployAspectAction","args","context","output","apiClient","mediaLibrary","withMediaLibraryConfig","aspectId","argsWithoutOptions","all","extOptions","error","mediaLibraryId","determineTargetMediaLibrary","client","withConfig","apiVersion","MINIMUM_API_VERSION","requestTagPrefix","aspectsPath","filterAspects","entry","_id","pipe","mergeMap","status","aspects","of","reason","deployAspects","dryRun","reportResult","reportUnfoundAspect","subscribe","importAspects","unregister","entries","fs","readdir","withFileTypes","from","tap","register","target","process","version","slice","supported","filter","file","isFile","ASPECT_FILE_EXTENSIONS","includes","path","extname","name","switchMap","importAspect","filename","map","maybeAspect","isAssetAspect","aspect","validationErrors","valid","errors","validateMediaLibraryAssetAspect","definition","groupBy","group","zip","key","toArray","finalize","require","resolve","default","length","observable","request","method","uri","tag","query","String","body","mutations","createOrReplace","catchError","message","result","chalk","list","formatAspectList","print","success","bold","pluralize","warn","red","scan","concat","takeLast","label","simplifiedErrors","flatMap","errorLabel","bgRed","remainingErrorsCount","remainingErrorsLabel","italic","dim","join","EOL"],"mappings":"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"}