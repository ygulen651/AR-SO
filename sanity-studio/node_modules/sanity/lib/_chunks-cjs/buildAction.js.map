{"version":3,"file":"buildAction.js","sources":["../../src/_internal/cli/actions/app/build.telemetry.ts","../../src/_internal/cli/actions/app/buildAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\nexport const BuildTrace = defineTrace<{outputSize: number}>({\n  name: 'App Build Completed',\n  version: 0,\n  description: 'An App build completed',\n})\n","/* eslint-disable max-statements */\nimport path from 'node:path'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport {noopLogger} from '@sanity/telemetry'\nimport chalk from 'chalk'\nimport {info} from 'log-symbols'\nimport {rimraf} from 'rimraf'\nimport semver from 'semver'\n\nimport {buildStaticFiles} from '../../server'\nimport {buildVendorDependencies} from '../../server/buildVendorDependencies'\nimport {compareDependencyVersions} from '../../util/compareDependencyVersions'\nimport {getAppAutoUpdateImportMap} from '../../util/getAutoUpdatesImportMap'\nimport {formatModuleSizes, sortModulesBySize} from '../../util/moduleFormatUtils'\nimport {readModuleVersion} from '../../util/readModuleVersion'\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport {getTimer} from '../../util/timing'\nimport {BuildTrace} from './build.telemetry'\n\nexport interface BuildSanityAppCommandFlags {\n  'yes'?: boolean\n  'y'?: boolean\n  'minify'?: boolean\n  'stats'?: boolean\n  'source-maps'?: boolean\n  'auto-updates'?: boolean\n}\n\nexport default async function buildSanityApp(\n  args: CliCommandArguments<BuildSanityAppCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string},\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig, telemetry = noopLogger} = context\n  const flags: BuildSanityAppCommandFlags = {\n    'minify': true,\n    'stats': false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  /**\n   * Unattended mode means that if there are any prompts it will use `YES` for them but will no change anything that doesn't have a prompt\n   */\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n\n  const autoUpdatesEnabled = shouldAutoUpdate({flags, cliConfig})\n\n  const installedSdkVersion = await readModuleVersion(context.workDir, '@sanity/sdk-react')\n  const installedSanityVersion = await readModuleVersion(context.workDir, 'sanity')\n\n  if (!installedSdkVersion) {\n    throw new Error(`Failed to find installed @sanity/sdk-react version`)\n  }\n  // Get the version without any tags if any\n  const coercedSdkVersion = semver.coerce(installedSdkVersion)?.version\n  // Sanity might not be installed, but if it is we want to auto update it.\n  const coercedSanityVersion = semver.coerce(installedSanityVersion)?.version\n  if (autoUpdatesEnabled && !coercedSdkVersion) {\n    throw new Error(`Failed to parse installed SDK version: ${installedSdkVersion}`)\n  }\n  const sdkVersion = encodeURIComponent(`^${coercedSdkVersion}`)\n  const sanityVersion = coercedSanityVersion && encodeURIComponent(`^${coercedSanityVersion}`)\n  const autoUpdatesImports = getAppAutoUpdateImportMap({sdkVersion, sanityVersion})\n\n  if (autoUpdatesEnabled) {\n    output.print(`${info} Building with auto-updates enabled`)\n\n    // Check the versions\n    const result = await compareDependencyVersions(autoUpdatesImports, workDir)\n\n    // If it is in unattended mode, we don't want to prompt\n    if (result?.length && !unattendedMode) {\n      const shouldContinue = await prompt.single({\n        type: 'confirm',\n        message: chalk.yellow(\n          `The following local package versions are different from the versions currently served at runtime.\\n` +\n            `When using auto updates, we recommend that you test locally with the same versions before deploying. \\n\\n` +\n            `${result.map((mod) => ` - ${mod.pkg} (local version: ${mod.installed}, runtime version: ${mod.remote})`).join('\\n')} \\n\\n` +\n            `Continue anyway?`,\n        ),\n        default: false,\n      })\n\n      if (!shouldContinue) {\n        return process.exit(0)\n      }\n    }\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:',\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  // Determine base path for built studio\n  let basePath = '/'\n  const envBasePath = process.env.SANITY_APP_BASEPATH\n  const configBasePath = cliConfig?.project?.basePath\n\n  // Allow `sanity deploy` to override base path\n  if (overrides?.basePath) {\n    basePath = overrides.basePath\n  } else if (envBasePath) {\n    // Environment variable (SANITY_APP_BASEPATH)\n    basePath = envBasePath\n  } else if (configBasePath) {\n    // `sanity.cli.ts`\n    basePath = configBasePath\n  }\n\n  if (envBasePath && configBasePath) {\n    output.warn(\n      `Overriding configured base path (${configBasePath}) with value from environment variable (${envBasePath})`,\n    )\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner(`Build Sanity application`).start()\n\n  const trace = telemetry.trace(BuildTrace)\n  trace.start()\n\n  let importMap\n\n  if (autoUpdatesEnabled) {\n    importMap = {\n      imports: {\n        ...(await buildVendorDependencies({cwd: workDir, outputDir, basePath})),\n        ...autoUpdatesImports,\n      },\n    }\n  }\n\n  try {\n    timer.start('bundleStudio')\n\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath,\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n      importMap,\n      reactCompiler:\n        cliConfig && 'reactCompiler' in cliConfig ? cliConfig.reactCompiler : undefined,\n      entry: cliConfig && 'app' in cliConfig ? cliConfig.app?.entry : undefined,\n      isApp: true,\n    })\n\n    trace.log({\n      outputSize: bundle.chunks\n        .flatMap((chunk) => chunk.modules.flatMap((mod) => mod.renderedLength))\n        .reduce((sum, n) => sum + n, 0),\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity application (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n\n    trace.complete()\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    trace.error(err)\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\n// eslint-disable-next-line no-process-env\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_APP_'))\n}\n"],"names":["BuildTrace","defineTrace","name","version","description","buildSanityApp","args","context","overrides","timer","getTimer","output","prompt","workDir","cliConfig","telemetry","noopLogger","flags","extOptions","unattendedMode","Boolean","yes","y","defaultOutputDir","path","resolve","join","outputDir","argsWithoutOptions","autoUpdatesEnabled","shouldAutoUpdate","installedSdkVersion","readModuleVersion","installedSanityVersion","Error","coercedSdkVersion","semver","coerce","coercedSanityVersion","sdkVersion","encodeURIComponent","sanityVersion","autoUpdatesImports","getAppAutoUpdateImportMap","print","info","result","compareDependencyVersions","length","single","type","message","chalk","yellow","map","mod","pkg","installed","remote","default","process","exit","envVarKeys","getSanityEnvVars","forEach","key","shouldClean","basePath","envBasePath","env","SANITY_APP_BASEPATH","configBasePath","project","warn","spin","start","spinner","rimraf","cleanDuration","end","text","toFixed","succeed","trace","importMap","imports","buildVendorDependencies","cwd","bundle","buildStaticFiles","sourceMap","minify","vite","undefined","reactCompiler","entry","app","isApp","log","outputSize","chunks","flatMap","chunk","modules","renderedLength","reduce","sum","n","buildDuration","complete","stats","formatModuleSizes","sortModulesBySize","slice","err","fail","error","didCompile","Object","keys","filter","toUpperCase","startsWith"],"mappings":"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"}