{"version":3,"file":"getGraphQLAPIs.js","sources":["../../src/_internal/cli/actions/graphql/getGraphQLAPIs.ts"],"sourcesContent":["import path from 'node:path'\nimport {isMainThread, Worker} from 'node:worker_threads'\n\nimport {type CliCommandContext, type CliV3CommandContext} from '@sanity/cli'\nimport readPkgUp from 'read-pkg-up'\nimport {createSchema} from 'sanity'\n\nimport {\n  type ResolvedGraphQLAPI,\n  type ResolvedSourceProperties,\n  type SchemaDefinitionish,\n  type TypeResolvedGraphQLAPI,\n} from './types'\n\nexport async function getGraphQLAPIs(cliContext: CliCommandContext): Promise<ResolvedGraphQLAPI[]> {\n  if (!isModernCliConfig(cliContext)) {\n    throw new Error('Expected Sanity studio of version 3 or above')\n  }\n\n  if (!isMainThread) {\n    throw new Error('getGraphQLAPIs() must be called from the main thread')\n  }\n\n  const defaultSchema = createSchema({name: 'default', types: []})\n  const defaultTypes = defaultSchema.getTypeNames()\n  const isCustomType = (type: SchemaDefinitionish) => !defaultTypes.includes(type.name)\n\n  const apis = await getApisWithSchemaTypes(cliContext)\n  const resolved = apis.map(\n    ({schemaTypes, ...api}): ResolvedSourceProperties => ({\n      schema: createSchema({name: 'default', types: schemaTypes.filter(isCustomType)}),\n      ...api,\n    }),\n  )\n\n  return resolved\n}\n\nfunction getApisWithSchemaTypes(cliContext: CliCommandContext): Promise<TypeResolvedGraphQLAPI[]> {\n  return new Promise<TypeResolvedGraphQLAPI[]>((resolve, reject) => {\n    const {cliConfig, cliConfigPath, workDir} = cliContext\n    const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n    if (!rootPkgPath) {\n      throw new Error('Could not find root directory for `sanity` package')\n    }\n\n    const rootDir = path.dirname(rootPkgPath)\n    const workerPath = path.join(rootDir, 'lib', '_internal', 'cli', 'threads', 'getGraphQLAPIs.js')\n    const worker = new Worker(workerPath, {\n      workerData: {cliConfig: serialize(cliConfig || {}), cliConfigPath, workDir},\n      // eslint-disable-next-line no-process-env\n      env: process.env,\n    })\n    worker.on('message', resolve)\n    worker.on('error', reject)\n    worker.on('exit', (code) => {\n      if (code !== 0) reject(new Error(`Worker stopped with exit code ${code}`))\n    })\n  })\n}\n\nfunction isModernCliConfig(config: CliCommandContext): config is CliV3CommandContext {\n  return config.sanityMajorVersion >= 3\n}\n\nfunction serialize<T>(obj: T): T {\n  try {\n    return JSON.parse(JSON.stringify(obj))\n  } catch (cause) {\n    throw new Error(`Failed to serialize CLI configuration`, {cause})\n  }\n}\n"],"names":["getGraphQLAPIs","cliContext","isModernCliConfig","Error","isMainThread","defaultTypes","createSchema","name","types","getTypeNames","isCustomType","type","includes","getApisWithSchemaTypes","map","schemaTypes","api","schema","filter","Promise","resolve","reject","cliConfig","cliConfigPath","workDir","rootPkgPath","readPkgUp","sync","cwd","__dirname","path","rootDir","dirname","workerPath","join","worker","Worker","workerData","serialize","env","process","on","code","config","sanityMajorVersion","obj","JSON","parse","stringify","cause"],"mappings":";;;;;;AAcA,eAAsBA,eAAeC,YAA8D;AAC7F,MAAA,CAACC,kBAAkBD,UAAU;AACzB,UAAA,IAAIE,MAAM,8CAA8C;AAGhE,MAAI,CAACC,oBAAAA;AACG,UAAA,IAAID,MAAM,sDAAsD;AAIxE,QAAME,eADgBC,OAAAA,aAAa;AAAA,IAACC,MAAM;AAAA,IAAWC,OAAO,CAAA;AAAA,EAAA,CAAG,EAC5BC,gBAC7BC,eAAgBC,UAA8B,CAACN,aAAaO,SAASD,KAAKJ,IAAI;AAUpF,UARa,MAAMM,uBAAuBZ,UAAU,GAC9Ba,IACpB,CAAC;AAAA,IAACC;AAAAA,IAAa,GAAGC;AAAAA,EAAAA,OAAoC;AAAA,IACpDC,QAAQX,OAAAA,aAAa;AAAA,MAACC,MAAM;AAAA,MAAWC,OAAOO,YAAYG,OAAOR,YAAY;AAAA,IAAA,CAAE;AAAA,IAC/E,GAAGM;AAAAA,EAAAA,EAEP;AAGF;AAEA,SAASH,uBAAuBZ,YAAkE;AAChG,SAAO,IAAIkB,QAAkC,CAACC,SAASC,WAAW;AAC1D,UAAA;AAAA,MAACC;AAAAA,MAAWC;AAAAA,MAAeC;AAAAA,IAAWvB,IAAAA,YACtCwB,cAAcC,mBAAAA,QAAUC,KAAK;AAAA,MAACC,KAAKC;AAAAA,IAAU,CAAA,GAAGC;AACtD,QAAI,CAACL;AACG,YAAA,IAAItB,MAAM,oDAAoD;AAGtE,UAAM4B,UAAUD,cAAAA,QAAKE,QAAQP,WAAW,GAClCQ,aAAaH,sBAAKI,KAAKH,SAAS,OAAO,aAAa,OAAO,WAAW,mBAAmB,GACzFI,SAAS,IAAIC,2BAAOH,YAAY;AAAA,MACpCI,YAAY;AAAA,QAACf,WAAWgB,UAAUhB,aAAa,EAAE;AAAA,QAAGC;AAAAA,QAAeC;AAAAA,MAAO;AAAA;AAAA,MAE1Ee,KAAKC,QAAQD;AAAAA,IAAAA,CACd;AACDJ,WAAOM,GAAG,WAAWrB,OAAO,GAC5Be,OAAOM,GAAG,SAASpB,MAAM,GACzBc,OAAOM,GAAG,QAASC,CAAS,SAAA;AACtBA,eAAS,KAAGrB,OAAO,IAAIlB,MAAM,iCAAiCuC,IAAI,EAAE,CAAC;AAAA,IAAA,CAC1E;AAAA,EAAA,CACF;AACH;AAEA,SAASxC,kBAAkByC,QAA0D;AACnF,SAAOA,OAAOC,sBAAsB;AACtC;AAEA,SAASN,UAAaO,KAAW;AAC3B,MAAA;AACF,WAAOC,KAAKC,MAAMD,KAAKE,UAAUH,GAAG,CAAC;AAAA,WAC9BI,OAAO;AACR,UAAA,IAAI9C,MAAM,yCAAyC;AAAA,MAAC8C;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAEpE;;"}