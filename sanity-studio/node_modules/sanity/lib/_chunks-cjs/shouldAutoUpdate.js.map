{"version":3,"file":"shouldAutoUpdate.js","sources":["../../src/_internal/cli/util/readPackageManifest.ts","../../src/_internal/cli/util/compareDependencyVersions.ts","../../src/_internal/cli/util/getAutoUpdatesImportMap.ts","../../src/_internal/cli/util/readModuleVersion.ts","../../src/_internal/cli/util/shouldAutoUpdate.ts"],"sourcesContent":["import {readFile} from 'node:fs/promises'\n\nimport {type PackageJson} from '@sanity/cli'\n\ninterface DependencyDeclarations {\n  dependencies: Record<string, string | undefined>\n  devDependencies: Record<string, string | undefined>\n}\n\ninterface PackageManifest extends DependencyDeclarations {\n  name: string\n  version: string\n}\n\nexport interface PartialPackageManifest extends Partial<DependencyDeclarations> {\n  name: string\n  version: string\n}\n\nfunction isPackageManifest(item: unknown): item is PartialPackageManifest {\n  return typeof item === 'object' && item !== null && 'name' in item && 'version' in item\n}\n\n/**\n * Read the `package.json` file at the given path\n *\n * @param filePath - Path to package.json to read\n * @returns The parsed package.json\n */\nexport async function readPackageJson(filePath: string): Promise<PackageJson> {\n  try {\n    return JSON.parse(await readFile(filePath, 'utf8'))\n  } catch (err) {\n    throw new Error(`Failed to read \"${filePath}\": ${err.message}`)\n  }\n}\n/**\n * Read the `package.json` file at the given path and return an object that guarantees\n * the presence of name, version, dependencies, dev dependencies and peer dependencies\n *\n * @param packageJsonPath - Path to package.json to read\n * @returns Reduced package.json with guarantees for name, version and dependency fields\n */\nexport async function readPackageManifest(\n  packageJsonPath: string,\n  defaults: Partial<PartialPackageManifest> = {},\n): Promise<PackageManifest> {\n  let manifest: unknown\n  try {\n    manifest = {...defaults, ...(await readPackageJson(packageJsonPath))}\n  } catch (err) {\n    throw new Error(`Failed to read \"${packageJsonPath}\": ${err.message}`)\n  }\n\n  if (!isPackageManifest(manifest)) {\n    throw new Error(`Failed to read \"${packageJsonPath}\": Invalid package manifest`)\n  }\n\n  const {name, version, dependencies = {}, devDependencies = {}} = manifest\n  return {name, version, dependencies, devDependencies}\n}\n","import path from 'node:path'\n\nimport resolveFrom from 'resolve-from'\nimport semver from 'semver'\n\nimport {\n  type SanityAppAutoUpdatesImportMap,\n  type StudioAutoUpdatesImportMap,\n} from './getAutoUpdatesImportMap'\nimport {readPackageManifest} from './readPackageManifest'\n\nasync function getRemoteResolvedVersion(fetchFn: typeof fetch, url: string) {\n  try {\n    const res = await fetchFn(url, {method: 'HEAD', redirect: 'manual'})\n    return res.headers.get('x-resolved-version')\n  } catch (err) {\n    throw new Error(`Failed to fetch remote version for ${url}: ${err.message}`)\n  }\n}\n\ninterface CompareDependencyVersions {\n  pkg: string\n  installed: string\n  remote: string\n}\n\n/**\n * Compares the versions of dependencies in the studio or app with their remote versions.\n *\n * This function reads the package.json file in the provided working directory, and compares the versions of the dependencies\n * specified in the `autoUpdatesImports` parameter with their remote versions. If the versions do not match, the dependency is\n * added to a list of failed dependencies, which is returned by the function.\n *\n * The failed dependencies are anything that does not strictly match the remote version.\n * This means that if a version is lower or greater by even a patch it will be marked as failed.\n *\n * @param autoUpdatesImports - An object mapping package names to their remote import URLs.\n * @param workDir - The path to the working directory containing the package.json file.\n * @param fetchFn - Optional {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API | Fetch}-compatible function to use for requesting the current remote version of a module\n *\n * @returns A promise that resolves to an array of objects, each containing\n * the name of a package whose local and remote versions do not match, along with the local and remote versions.\n *\n * @throws Throws an error if the remote version of a package cannot be fetched, or if the local version of a package\n * cannot be parsed.\n */\nexport async function compareDependencyVersions(\n  autoUpdatesImports: StudioAutoUpdatesImportMap | SanityAppAutoUpdatesImportMap,\n  workDir: string,\n  fetchFn = globalThis.fetch,\n): Promise<Array<CompareDependencyVersions>> {\n  const manifest = await readPackageManifest(path.join(workDir, 'package.json'))\n  const dependencies = {...manifest.dependencies, ...manifest.devDependencies}\n\n  const failedDependencies: Array<CompareDependencyVersions> = []\n\n  // Filter out the packages that are wildcards in the import map\n  const filteredAutoUpdatesImports = Object.entries(autoUpdatesImports).filter(\n    ([pkg]) => !pkg.endsWith('/'),\n  ) as Array<[string, string]>\n\n  for (const [pkg, value] of filteredAutoUpdatesImports) {\n    const resolvedVersion = await getRemoteResolvedVersion(fetchFn, value)\n\n    if (!resolvedVersion) {\n      throw new Error(`Failed to fetch remote version for ${value}`)\n    }\n\n    const dependency = dependencies[pkg]\n    const manifestPath = resolveFrom.silent(workDir, path.join(pkg, 'package.json'))\n\n    const installed = semver.coerce(\n      manifestPath ? (await readPackageManifest(manifestPath)).version : dependency,\n    )\n\n    if (!installed) {\n      throw new Error(`Failed to parse installed version for ${pkg}`)\n    }\n\n    if (!semver.eq(resolvedVersion, installed.version)) {\n      failedDependencies.push({pkg, installed: installed.version, remote: resolvedVersion})\n    }\n  }\n\n  return failedDependencies\n}\n","/**\n * @internal\n */\nexport interface StudioAutoUpdatesImportMap {\n  'sanity': string\n  'sanity/': string\n  '@sanity/vision'?: string\n  '@sanity/vision/'?: string\n}\n\nexport interface SanityAppAutoUpdatesImportMap extends Partial<StudioAutoUpdatesImportMap> {\n  '@sanity/sdk': string\n  '@sanity/sdk/': string\n  '@sanity/sdk-react': string\n  '@sanity/sdk-react/': string\n}\n\nconst MODULES_HOST =\n  process.env.SANITY_INTERNAL_ENV === 'staging'\n    ? 'https://sanity-cdn.work'\n    : 'https://sanity-cdn.com'\n\nfunction getTimestamp(): string {\n  return `t${Math.floor(Date.now() / 1000)}`\n}\n\n/**\n * @internal\n */\nexport function getStudioAutoUpdateImportMap(\n  version: string,\n  includeVision = true,\n): StudioAutoUpdatesImportMap {\n  const timestamp = getTimestamp()\n\n  const autoUpdatesImports = {\n    'sanity': `${MODULES_HOST}/v1/modules/sanity/default/${version}/${timestamp}`,\n    'sanity/': `${MODULES_HOST}/v1/modules/sanity/default/${version}/${timestamp}/`,\n  }\n\n  if (includeVision) {\n    return {\n      ...autoUpdatesImports,\n      '@sanity/vision': `${MODULES_HOST}/v1/modules/@sanity__vision/default/${version}/${timestamp}`,\n      '@sanity/vision/': `${MODULES_HOST}/v1/modules/@sanity__vision/default/${version}/${timestamp}/`,\n    }\n  }\n\n  return autoUpdatesImports\n}\n\ninterface GetAppAutoUpdateImportMapOptions {\n  sdkVersion: string\n  sanityVersion?: string\n}\n\n/**\n * @internal\n */\nexport function getAppAutoUpdateImportMap(\n  options: GetAppAutoUpdateImportMapOptions,\n): SanityAppAutoUpdatesImportMap {\n  const timestamp = getTimestamp()\n\n  const {sdkVersion, sanityVersion} = options\n\n  const autoUpdatesImports: SanityAppAutoUpdatesImportMap = {\n    '@sanity/sdk': `${MODULES_HOST}/v1/modules/@sanity__sdk/default/${sdkVersion}/${timestamp}`,\n    '@sanity/sdk/': `${MODULES_HOST}/v1/modules/@sanity__sdk/default/${sdkVersion}/${timestamp}/`,\n    '@sanity/sdk-react': `${MODULES_HOST}/v1/modules/@sanity__sdk-react/default/${sdkVersion}/${timestamp}`,\n    '@sanity/sdk-react/': `${MODULES_HOST}/v1/modules/@sanity__sdk-react/default/${sdkVersion}/${timestamp}/`,\n  }\n\n  if (sanityVersion) {\n    const sanityImportMap = getStudioAutoUpdateImportMap(sanityVersion, false)\n    return {...autoUpdatesImports, ...sanityImportMap}\n  }\n\n  return autoUpdatesImports\n}\n","import path from 'node:path'\n\nimport resolveFrom from 'resolve-from'\n\nimport {readPackageManifest} from './readPackageManifest'\n\n/**\n * Reads the version number of the _installed_ module, or returns `null` if not found\n *\n * @param dir - Path of the directory to read the module from\n * @param moduleName - Name of module to get installed version for\n * @returns Version number, of null\n */\nexport async function readModuleVersion(dir: string, moduleName: string): Promise<string | null> {\n  const manifestPath = resolveFrom.silent(dir, path.join(moduleName, 'package.json'))\n  return manifestPath ? (await readPackageManifest(manifestPath)).version : null\n}\n","import {type CliConfig} from '@sanity/cli'\nimport chalk from 'chalk'\n\ninterface AutoUpdateSources {\n  flags: {['auto-updates']?: boolean}\n  cliConfig?: CliConfig\n  output?: {warn: (message: string) => void}\n}\n\n/**\n * Compares parameters from various sources to determine whether or not to auto-update\n * @param sources - The sources of the auto-update parameter, including CLI flags and the CLI config\n * @returns boolean\n * @internal\n */\nexport function shouldAutoUpdate({flags, cliConfig, output}: AutoUpdateSources): boolean {\n  // cli flags (for example, '--no-auto-updates') should take precedence\n  if ('auto-updates' in flags) {\n    if (output) {\n      const flagUsed = flags['auto-updates'] ? '--auto-updates' : '--no-auto-updates'\n      output.warn(\n        chalk.yellow(\n          `The ${flagUsed} flag is deprecated for \\`deploy\\` and \\`build\\` commands. Set the \\`autoUpdates\\` option in \\`sanity.cli.ts\\` or \\`sanity.cli.js\\` instead.`,\n        ),\n      )\n    }\n    return Boolean(flags['auto-updates'])\n  }\n\n  if (cliConfig && 'autoUpdates' in cliConfig) {\n    return Boolean(cliConfig.autoUpdates)\n  }\n\n  return false\n}\n"],"names":["isPackageManifest","item","readPackageJson","filePath","JSON","parse","readFile","err","Error","message","readPackageManifest","packageJsonPath","defaults","manifest","name","version","dependencies","devDependencies","getRemoteResolvedVersion","fetchFn","url","method","redirect","headers","get","compareDependencyVersions","autoUpdatesImports","workDir","globalThis","fetch","path","join","failedDependencies","filteredAutoUpdatesImports","Object","entries","filter","pkg","endsWith","value","resolvedVersion","dependency","manifestPath","resolveFrom","silent","installed","semver","coerce","eq","push","remote","MODULES_HOST","process","env","SANITY_INTERNAL_ENV","getTimestamp","Math","floor","Date","now","getStudioAutoUpdateImportMap","includeVision","timestamp","getAppAutoUpdateImportMap","options","sdkVersion","sanityVersion","sanityImportMap","readModuleVersion","dir","moduleName","shouldAutoUpdate","flags","cliConfig","output","flagUsed","warn","chalk","yellow","Boolean","autoUpdates"],"mappings":"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"}