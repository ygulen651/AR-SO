{"version":3,"file":"pt-to-html.mjs","sources":["../src/escape.ts","../src/components/list.ts","../src/components/marks.ts","../src/warnings.ts","../src/components/unknown.ts","../src/components/defaults.ts","../src/components/merge.ts","../src/to-html.ts"],"sourcesContent":["const allowedProtocols = ['http', 'https', 'mailto', 'tel']\nconst charMap: Record<string, string> = {\n  '&': 'amp',\n  '<': 'lt',\n  '>': 'gt',\n  '\"': 'quot',\n  \"'\": '#x27',\n}\n\nexport function escapeHTML(str: string): string {\n  return replaceMultipleSpaces(str.replace(/[&<>\"']/g, (s) => `&${charMap[s]};`))\n}\n\nexport function replaceMultipleSpaces(str: string): string {\n  return str.replace(/ {2,}/g, (match: string) => `${'&nbsp;'.repeat(match.length - 1)} `)\n}\n\nexport function uriLooksSafe(uri: string): boolean {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  // Allow hash-links, absolute paths and \"same-protocol\" (//foo.bar) URLs\n  if (first === '#' || first === '/') {\n    return true\n  }\n\n  // If the URL does not contain a `:`, allow it\n  const colonIndex = url.indexOf(':')\n  if (colonIndex === -1) {\n    return true\n  }\n\n  // If the protocol is in the allowed list, treat it as OK\n  const proto = url.slice(0, colonIndex).toLowerCase()\n  if (allowedProtocols.indexOf(proto) !== -1) {\n    return true\n  }\n\n  // If the URL is `site/search?query=author:espen`, allow it\n  const queryIndex = url.indexOf('?')\n  if (queryIndex !== -1 && colonIndex > queryIndex) {\n    return true\n  }\n\n  // If the URL is `site/search#my:encoded:data`, allow it\n  const hashIndex = url.indexOf('#')\n  if (hashIndex !== -1 && colonIndex > hashIndex) {\n    return true\n  }\n\n  return false\n}\n","import type {PortableTextListComponent, PortableTextListItemComponent} from '../types'\n\nexport const defaultLists: Record<'number' | 'bullet', PortableTextListComponent> = {\n  number: ({children}) => `<ol>${children}</ol>`,\n  bullet: ({children}) => `<ul>${children}</ul>`,\n}\n\nexport const DefaultListItem: PortableTextListItemComponent = ({children}) => `<li>${children}</li>`\n","import type {TypedObject} from '@portabletext/types'\n\nimport {escapeHTML, uriLooksSafe} from '../escape'\nimport type {PortableTextMarkComponent} from '../types'\n\ninterface DefaultLink extends TypedObject {\n  _type: 'link'\n  href: string\n}\n\nconst link: PortableTextMarkComponent<DefaultLink> = ({children, value}) => {\n  const href = value?.href || ''\n  const looksSafe = uriLooksSafe(href)\n  return looksSafe ? `<a href=\"${escapeHTML(href)}\">${children}</a>` : children\n}\n\nexport const defaultMarks: Record<string, PortableTextMarkComponent | undefined> = {\n  'em': ({children}) => `<em>${children}</em>`,\n  'strong': ({children}) => `<strong>${children}</strong>`,\n  'code': ({children}) => `<code>${children}</code>`,\n  'underline': ({children}) => `<span style=\"text-decoration:underline\">${children}</span>`,\n  'strike-through': ({children}) => `<del>${children}</del>`,\n  link,\n}\n","const getTemplate = (type: string, prop: string): string =>\n  `Unknown ${type}, specify a component for it in the \\`components.${prop}\\` option`\n\nexport const unknownTypeWarning = (typeName: string): string =>\n  getTemplate(`block type \"${typeName}\"`, 'types')\n\nexport const unknownMarkWarning = (markType: string): string =>\n  getTemplate(`mark type \"${markType}\"`, 'marks')\n\nexport const unknownBlockStyleWarning = (blockStyle: string): string =>\n  getTemplate(`block style \"${blockStyle}\"`, 'block')\n\nexport const unknownListStyleWarning = (listStyle: string): string =>\n  getTemplate(`list style \"${listStyle}\"`, 'list')\n\nexport const unknownListItemStyleWarning = (listStyle: string): string =>\n  getTemplate(`list item style \"${listStyle}\"`, 'listItem')\n\nexport function printWarning(message: string): void {\n  console.warn(message)\n}\n","import type {PortableTextHtmlComponents} from '../types'\nimport {unknownTypeWarning} from '../warnings'\n\nexport const DefaultUnknownType: PortableTextHtmlComponents['unknownType'] = ({\n  value,\n  isInline,\n}) => {\n  const warning = unknownTypeWarning(value._type)\n  return isInline\n    ? `<span style=\"display:none\">${warning}</span>`\n    : `<div style=\"display:none\">${warning}</div>`\n}\n\nexport const DefaultUnknownMark: PortableTextHtmlComponents['unknownMark'] = ({\n  markType,\n  children,\n}) => {\n  return `<span class=\"unknown__pt__mark__${markType}\">${children}</span>`\n}\n\nexport const DefaultUnknownBlockStyle: PortableTextHtmlComponents['unknownBlockStyle'] = ({\n  children,\n}) => {\n  return `<p>${children}</p>`\n}\n\nexport const DefaultUnknownList: PortableTextHtmlComponents['unknownList'] = ({children}) => {\n  return `<ul>${children}</ul>`\n}\n\nexport const DefaultUnknownListItem: PortableTextHtmlComponents['unknownListItem'] = ({\n  children,\n}) => {\n  return `<li>${children}</li>`\n}\n","import type {PortableTextBlockStyle} from '@portabletext/types'\n\nimport {escapeHTML} from '../escape'\nimport type {PortableTextBlockComponent, PortableTextHtmlComponents} from '../types'\nimport {DefaultListItem, defaultLists} from './list'\nimport {defaultMarks} from './marks'\nimport {\n  DefaultUnknownBlockStyle,\n  DefaultUnknownList,\n  DefaultUnknownListItem,\n  DefaultUnknownMark,\n  DefaultUnknownType,\n} from './unknown'\n\nexport const DefaultHardBreak = (): string => '<br/>'\n\nexport const defaultPortableTextBlockStyles: Record<\n  PortableTextBlockStyle,\n  PortableTextBlockComponent | undefined\n> = {\n  normal: ({children}) => `<p>${children}</p>`,\n  blockquote: ({children}) => `<blockquote>${children}</blockquote>`,\n  h1: ({children}) => `<h1>${children}</h1>`,\n  h2: ({children}) => `<h2>${children}</h2>`,\n  h3: ({children}) => `<h3>${children}</h3>`,\n  h4: ({children}) => `<h4>${children}</h4>`,\n  h5: ({children}) => `<h5>${children}</h5>`,\n  h6: ({children}) => `<h6>${children}</h6>`,\n}\n\nexport const defaultComponents: PortableTextHtmlComponents = {\n  types: {},\n\n  block: defaultPortableTextBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n  escapeHTML: escapeHTML,\n\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle,\n}\n","import type {PortableTextComponents, PortableTextHtmlComponents} from '../types'\n\nexport function mergeComponents(\n  parent: PortableTextHtmlComponents,\n  overrides: PortableTextComponents,\n): PortableTextHtmlComponents {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {block, list, listItem, marks, types, ...rest} = overrides\n  // @todo figure out how to not `as ...` these\n  return {\n    ...parent,\n    block: mergeDeeply(parent, overrides, 'block') as PortableTextHtmlComponents['block'],\n    list: mergeDeeply(parent, overrides, 'list') as PortableTextHtmlComponents['list'],\n    listItem: mergeDeeply(parent, overrides, 'listItem') as PortableTextHtmlComponents['listItem'],\n    marks: mergeDeeply(parent, overrides, 'marks') as PortableTextHtmlComponents['marks'],\n    types: mergeDeeply(parent, overrides, 'types') as PortableTextHtmlComponents['types'],\n    ...rest,\n  }\n}\n\nfunction mergeDeeply(\n  parent: PortableTextHtmlComponents,\n  overrides: PortableTextComponents,\n  key: 'block' | 'list' | 'listItem' | 'marks' | 'types',\n): PortableTextHtmlComponents[typeof key] {\n  const override = overrides[key]\n  const parentVal = parent[key]\n\n  if (typeof override === 'function') {\n    return override\n  }\n\n  if (override && typeof parentVal === 'function') {\n    return override\n  }\n\n  if (override) {\n    return {...parentVal, ...override} as PortableTextHtmlComponents[typeof key]\n  }\n\n  return parentVal\n}\n","import {\n  buildMarksTree,\n  isPortableTextBlock,\n  isPortableTextListItemBlock,\n  isPortableTextToolkitList,\n  isPortableTextToolkitSpan,\n  isPortableTextToolkitTextNode,\n  nestLists,\n  spanToPlainText,\n  type ToolkitNestedPortableTextSpan,\n  type ToolkitTextNode,\n} from '@portabletext/toolkit'\nimport type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\n\nimport {defaultComponents} from './components/defaults'\nimport {mergeComponents} from './components/merge'\nimport type {\n  HtmlPortableTextList,\n  MissingComponentHandler,\n  NodeRenderer,\n  PortableTextHtmlComponents,\n  PortableTextOptions,\n  Serializable,\n  SerializedBlock,\n} from './types'\nimport {\n  printWarning,\n  unknownBlockStyleWarning,\n  unknownListItemStyleWarning,\n  unknownListStyleWarning,\n  unknownMarkWarning,\n  unknownTypeWarning,\n} from './warnings'\n\nexport function toHTML<B extends TypedObject = PortableTextBlock | ArbitraryTypedObject>(\n  value: B | B[],\n  options: PortableTextOptions = {},\n): string {\n  const {\n    components: componentOverrides,\n    onMissingComponent: missingComponentHandler = printWarning,\n  } = options\n\n  const handleMissingComponent = missingComponentHandler || noop\n  const blocks = Array.isArray(value) ? value : [value]\n  const nested = nestLists(blocks, 'html')\n  const components = componentOverrides\n    ? mergeComponents(defaultComponents, componentOverrides)\n    : defaultComponents\n\n  const renderNode = getNodeRenderer(components, handleMissingComponent)\n  const rendered = nested.map((node, index) =>\n    renderNode({node: node, index, isInline: false, renderNode}),\n  )\n\n  return rendered.join('')\n}\n\nconst getNodeRenderer = (\n  components: PortableTextHtmlComponents,\n  handleMissingComponent: MissingComponentHandler,\n): NodeRenderer => {\n  function renderNode<N extends TypedObject>(options: Serializable<N>): string {\n    const {node, index, isInline} = options\n\n    if (isPortableTextToolkitList(node)) {\n      return renderList(node, index)\n    }\n\n    if (isPortableTextListItemBlock(node)) {\n      return renderListItem(node, index)\n    }\n\n    if (isPortableTextToolkitSpan(node)) {\n      return renderSpan(node)\n    }\n\n    if (isPortableTextBlock(node)) {\n      return renderBlock(node, index, isInline)\n    }\n\n    if (isPortableTextToolkitTextNode(node)) {\n      return renderText(node)\n    }\n\n    return renderCustomBlock(node, index, isInline)\n  }\n\n  function renderListItem(\n    node: PortableTextListItemBlock<PortableTextMarkDefinition, PortableTextSpan>,\n    index: number,\n  ): string {\n    const tree = serializeBlock({node, index, isInline: false, renderNode})\n    const renderer = components.listItem\n    const handler = typeof renderer === 'function' ? renderer : renderer[node.listItem]\n    const itemHandler = handler || components.unknownListItem\n\n    if (itemHandler === components.unknownListItem) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: 'listItemStyle',\n      })\n    }\n\n    let children = tree.children\n    if (node.style && node.style !== 'normal') {\n      // Wrap any other style in whatever the block component says to use\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {listItem, ...blockNode} = node\n      children = renderNode({node: blockNode, index, isInline: false, renderNode})\n    }\n\n    return itemHandler({value: node, index, isInline: false, renderNode, children})\n  }\n\n  function renderList(node: HtmlPortableTextList, index: number): string {\n    const children = node.children.map((child, childIndex) =>\n      renderNode({\n        node: child._key ? child : {...child, _key: `li-${index}-${childIndex}`},\n        index: childIndex,\n        isInline: false,\n        renderNode,\n      }),\n    )\n\n    const component = components.list\n    const handler = typeof component === 'function' ? component : component[node.listItem]\n    const list = handler || components.unknownList\n\n    if (list === components.unknownList) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListStyleWarning(style), {nodeType: 'listStyle', type: style})\n    }\n\n    return list({value: node, index, isInline: false, renderNode, children: children.join('')})\n  }\n\n  function renderSpan(node: ToolkitNestedPortableTextSpan): string {\n    const {markDef, markType, markKey} = node\n    const span = components.marks[markType] || components.unknownMark\n    const children = node.children.map((child, childIndex) =>\n      renderNode({node: child, index: childIndex, isInline: true, renderNode}),\n    )\n\n    if (span === components.unknownMark) {\n      handleMissingComponent(unknownMarkWarning(markType), {nodeType: 'mark', type: markType})\n    }\n\n    return span({\n      text: spanToPlainText(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children: children.join(''),\n    })\n  }\n\n  function renderBlock(node: PortableTextBlock, index: number, isInline: boolean): string {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {_key, ...props} = serializeBlock({node, index, isInline, renderNode})\n    const style = props.node.style || 'normal'\n    const handler =\n      typeof components.block === 'function' ? components.block : components.block[style]\n    const block = handler || components.unknownBlockStyle\n\n    if (block === components.unknownBlockStyle) {\n      handleMissingComponent(unknownBlockStyleWarning(style), {\n        nodeType: 'blockStyle',\n        type: style,\n      })\n    }\n\n    return block({...props, value: props.node, renderNode})\n  }\n\n  function renderText(node: ToolkitTextNode): string {\n    if (node.text === '\\n') {\n      const hardBreak = components.hardBreak\n      return hardBreak ? hardBreak() : '\\n'\n    }\n\n    return components.escapeHTML(node.text)\n  }\n\n  function renderCustomBlock(value: TypedObject, index: number, isInline: boolean): string {\n    const node = components.types[value._type]\n\n    if (!node) {\n      handleMissingComponent(unknownTypeWarning(value._type), {\n        nodeType: 'block',\n        type: value._type,\n      })\n    }\n\n    const component = node || components.unknownType\n    return component({\n      value,\n      isInline,\n      index,\n      renderNode,\n    })\n  }\n\n  return renderNode\n}\n\nfunction serializeBlock(options: Serializable<PortableTextBlock>): SerializedBlock {\n  const {node, index, isInline, renderNode} = options\n  const tree = buildMarksTree(node)\n  const children = tree.map((child, i) =>\n    renderNode({node: child, isInline: true, index: i, renderNode}),\n  )\n\n  return {\n    _key: node._key || `block-${index}`,\n    children: children.join(''),\n    index,\n    isInline,\n    node,\n  }\n}\n\nfunction noop() {\n  // Intentional noop\n}\n"],"names":["allowedProtocols","charMap","escapeHTML","str","replaceMultipleSpaces","replace","s","match","repeat","length","uriLooksSafe","uri","url","trim","first","charAt","colonIndex","indexOf","proto","slice","toLowerCase","queryIndex","hashIndex","defaultLists","number","children","bullet","DefaultListItem","link","value","href","defaultMarks","em","strong","code","underline","strike-through","getTemplate","type","prop","unknownTypeWarning","typeName","unknownMarkWarning","markType","unknownBlockStyleWarning","blockStyle","unknownListStyleWarning","listStyle","unknownListItemStyleWarning","printWarning","message","console","warn","DefaultUnknownType","isInline","warning","_type","DefaultUnknownMark","DefaultUnknownBlockStyle","DefaultUnknownList","DefaultUnknownListItem","DefaultHardBreak","defaultPortableTextBlockStyles","normal","blockquote","h1","h2","h3","h4","h5","h6","defaultComponents","types","block","marks","list","listItem","hardBreak","unknownType","unknownMark","unknownList","unknownListItem","unknownBlockStyle","mergeComponents","parent","overrides","rest","_excluded","_objectSpread","mergeDeeply","key","override","parentVal","toHTML","options","components","componentOverrides","onMissingComponent","missingComponentHandler","handleMissingComponent","noop","blocks","Array","isArray","nested","nestLists","renderNode","getNodeRenderer","map","node","index","join","isPortableTextToolkitList","renderList","isPortableTextListItemBlock","renderListItem","isPortableTextToolkitSpan","renderSpan","isPortableTextBlock","renderBlock","isPortableTextToolkitTextNode","renderText","renderCustomBlock","tree","serializeBlock","renderer","itemHandler","style","nodeType","blockNode","_objectWithoutProperties","_excluded2","child","childIndex","_key","component","markDef","markKey","span","text","spanToPlainText","_serializeBlock","props","_excluded3","buildMarksTree","i"],"mappings":"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"}